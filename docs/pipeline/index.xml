<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Container Pipeline on AWS Container DevSecOps</title>
    <link>//localhost:1313/pipeline/</link>
    <description>Recent content in Container Pipeline on AWS Container DevSecOps</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language><atom:link href="//localhost:1313/pipeline/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Container Pipeline Exercise Overview</title>
      <link>//localhost:1313/pipeline/intro_exercise/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>//localhost:1313/pipeline/intro_exercise/</guid>
      <description>AWS CI/CD We are going to deploy a pipeline with AWS Services
Static - Build our golang example applications, in a docker container and stores it in the AWS ECR
Build - Runs the Go Report Static Code analysis
Deploy - deploys the application via Code build, aws eks cli and kubectl</description>
    </item>
    
    <item>
      <title>Container Pipeline Exercise</title>
      <link>//localhost:1313/pipeline/exercise/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>//localhost:1313/pipeline/exercise/</guid>
      <description>The AWS Resources for pipeline, etc are build using Terraform.
 Create the Terraform state bucket Initialize Terraform Plan Terraform Apply terraform  First Create the state file s3 bucket aws s3 mb s3://devsecops-codemash-2022 --region us-west-2 make_bucket: devsecops-codemash-2022 Inside our Terraform Directory in the devsecops repo cd ~/environments/devsecopspipeline/
Update the ~/environments/devsecopspipeline/terraform/config.tf with the bucket name to store terraform state
terraform { backend &amp;#34;s3&amp;#34; { bucket = &amp;#34;devsecops-codemash-2022&amp;#34; key = &amp;#34;devsecops-codemash-2022/terraform_state&amp;#34; region = &amp;#34;us-west-2&amp;#34; } } Initialize the Terraform cd ~/environment/devsecopspipeline/</description>
    </item>
    
    <item>
      <title>Container Pipeline Exercise Part 2</title>
      <link>//localhost:1313/pipeline/exercise_2/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>//localhost:1313/pipeline/exercise_2/</guid>
      <description>Inside the devsecops repo cd ~/environments/devsecopspipeline/ we are going to manually push our application image to AWS ECR
AWS ECR Let&amp;rsquo;s push our docker image to ECR that was created from Terraform
make docker_push
  Expand me...   docker login -u AWS -p redacted https://123456789012.dkr.ecr.us-west-2.amazonaws.com WARNING! Using --password via the CLI is insecure. Use --password-stdin. WARNING! Your password will be stored unencrypted in /home/ec2-user/.docker/config.json. Configure a credential helper to remove this warning.</description>
    </item>
    
  </channel>
</rss>

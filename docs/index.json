[
{
	"uri": "//localhost:1313/",
	"title": "AWS DevSecOps Container Pipeline",
	"tags": [],
	"description": "",
	"content": "AWS DevSecOps Container Pipeline Welcome to AWS DevSecOps Container Pipeline workshop. In this workshop Engineers will learn how to secure their container pipeline using AWS and other Cloud Native tools. This will be part Lecture and part hands on.\nWe will be working through the following topics.\n Introduction   Workshop Setup   Development Environment   Container Builds   Container Pipeline   Running Containers   Conclusion   Survey   "
},
{
	"uri": "//localhost:1313/intro/",
	"title": "Introduction",
	"tags": [],
	"description": "",
	"content": "Learning Objectives  How to setup secure development environments Building secure containers Ensure secure best practices when running containers in production  Workshop structure  Workshop setup - Provision Cloud9 instance Tooling install - install all the tools needed to work through this workshop and provision an eks cluster Exercises  Development - Setup a secure Development environment with 3M and code commit signing Build - Secure container building in this one Pipeline - Scan code and containers for vulnerabilities and ensure secure practices are being followed Run - Setup secure container running environment on Kubernetes    For an intro on Kubernetes please see   "
},
{
	"uri": "//localhost:1313/intro/presenter/",
	"title": "Presenter",
	"tags": [],
	"description": "",
	"content": " AWS Ambassador O\u0026rsquo;Reilly Author - Networking and Kubernetes: A Layer Approach A Cloud Guru Instructor- Advanced Networking with Kubernetes on AWS Kubernetes Ingress NGINX Maintainer Kube Philly Organizer Cloud Native Director @ Contino  "
},
{
	"uri": "//localhost:1313/intro/contino/",
	"title": "Contino",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "//localhost:1313/setup/",
	"title": "Workshop Setup",
	"tags": [],
	"description": "",
	"content": "In this section we are going to set up your development environment on AWS Cloud9, install all the required tools and clone the repository with all our directions etc.\n AWS Cloud9   Cloud 9 Settings Configuration   Workshop tools   "
},
{
	"uri": "//localhost:1313/setup/cloud9/",
	"title": "AWS Cloud9",
	"tags": [],
	"description": "",
	"content": " A list of supported browsers for AWS Cloud9 is found here.\n   Launch Cloud9 in your closest region\nCreate a Cloud9 Environment: https://us-west-2.console.aws.amazon.com/cloud9/home?region=us-west-2\nYou\u0026rsquo;ll be prompt to log into your AWS Account in order to provision a Cloud9 Workspace\n  Configure the Cloud9 instance  Review the setup before submitting for creation  Wait for the Cloud9 instance to boot  Increase disk size for your Cloud9 Instance  Increase the disk size of your instances, this will cause your instance to reboot\nWith the docker images and all the other information it would be helpful to have a larger working space.\npip3 install --user --upgrade boto3 export AWS_DEFAULT_REGION=$(curl --silent http://169.254.169.254/latest/dynamic/instance-identity/document | jq -r .region) export instance_id=$(curl -s http://169.254.169.254/latest/meta-data/instance-id) python -c \u0026#34;import boto3 import os from botocore.exceptions import ClientError ec2 = boto3.client(\u0026#39;ec2\u0026#39;) volume_info = ec2.describe_volumes( Filters=[ { \u0026#39;Name\u0026#39;: \u0026#39;attachment.instance-id\u0026#39;, \u0026#39;Values\u0026#39;: [ os.getenv(\u0026#39;instance_id\u0026#39;) ] } ] ) volume_id = volume_info[\u0026#39;Volumes\u0026#39;][0][\u0026#39;VolumeId\u0026#39;] try: resize = ec2.modify_volume( VolumeId=volume_id, Size=100 ) print(resize) except ClientError as e: if e.response[\u0026#39;Error\u0026#39;][\u0026#39;Code\u0026#39;] == \u0026#39;InvalidParameterValue\u0026#39;: print(\u0026#39;ERROR MESSAGE: {}\u0026#39;.format(e))\u0026#34; if [ $? -eq 0 ]; then sudo reboot fi This will force a reboot of your Cloud9 instance\n"
},
{
	"uri": "//localhost:1313/setup/iam/",
	"title": "Cloud 9 Settings Configuration",
	"tags": [],
	"description": "",
	"content": "Create IAM Role   Log into your AWS Account you are using for this workshop.\n  Follow this link to create an IAM role with Administrator access.\n  Confirm that AWS service and EC2 are selected, then click Next: Permissions to view permissions.   Confirm that AdministratorAccess is checked, then click Next: Tags to assign tags.   Take the defaults, and click Next: Review to review.   Enter devsecop-workshop-admin for the Name, and click Create role.   Attach IAM Role to your Cloud9 instance  Click the grey circle button (in top right corner) and select Manage EC2 Instance  Select the instance, then choose Actions / Security / Modify IAM Role  Choose devsecop-workshop-admin from the IAM Role dropdown, and select Save   Update Cloud9 IAM Settings Return to your Cloud9 workspace and click the gear icon (in top right corner)\n Open Project Settings Select AWS SETTINGS Turn off AWS managed temporary credentials  Let\u0026rsquo;s make sure we have the right settings with the AWS CLI.\nTo ensure temporary credentials arenâ€™t already in place we will also remove any existing credentials file:\nrm -vf ${HOME}/.aws/credentials\nUse the GetCallerIdentity CLI command to validate that the Cloud9 IDE is using the correct IAM role.\naws sts get-caller-identity --query Arn | grep devsecops-workshop-admin -q \u0026amp;\u0026amp; echo \u0026quot;IAM role valid\u0026quot; || echo \u0026quot;IAM role NOT valid\u0026quot;\nChange EC2 Instance Settings  Open Project Settings Select EC2 Instance Change Stop my environment to a day.  "
},
{
	"uri": "//localhost:1313/setup/tools/",
	"title": "Workshop tools",
	"tags": [],
	"description": "",
	"content": "In order for us to continue with the exercises, there are several tools that our needed to be installed on our Cloud9 instance.\nDownload these two repos with git\ngit clone https://github.com/strongjz/devsecopspipeline\ngit clone https://github.com/strongjz/aws-container-devsecops\nOr Download the script here.\n  Scripts   tools-install.sh  (1 kb)    The script will install\n docker kind terraform eksctl kubectl helm  Navigate to where you downloaded the installation script.\ncd aws-container-devsecops/content/setup/clone.files/\nsudo bash ./tools-install.sh\n  Expand here is what it looks like in its entirety   :~/environment $ git clone https://github.com/strongjz/aws-container-devsecops Cloning into \u0026#39;aws-container-devsecops\u0026#39;... remote: Enumerating objects: 595, done. remote: Counting objects: 100% (595/595), done. remote: Compressing objects: 100% (399/399), done. remote: Total 595 (delta 170), reused 560 (delta 141), pack-reused 0 Receiving objects: 100% (595/595), 8.95 MiB | 23.25 MiB/s, done. Resolving deltas: 100% (170/170), done. ~/environment $ cd aws-container-devsecops/content/setup/^C ~/environment $ rm -rf aws-container-devsecops/ ~/environment $ git clone https://github.com/strongjz/aws-container-devsecops Cloning into \u0026#39;aws-container-devsecops\u0026#39;... remote: Enumerating objects: 624, done. remote: Counting objects: 100% (624/624), done. remote: Compressing objects: 100% (410/410), done. remote: Total 624 (delta 187), reused 587 (delta 156), pack-reused 0 Receiving objects: 100% (624/624), 8.95 MiB | 18.59 MiB/s, done. Resolving deltas: 100% (187/187), done. ~/environment $ cd aws-container-devsecops/content/setup/clone.files/ ~/environment/aws-container-devsecops/content/setup/clone.files (main) $ sudo Display all 2327 possibilities? (y or n) ~/environment/aws-container-devsecops/content/setup/clone.files (main) $ sudo ls tools-install.sh ~/environment/aws-container-devsecops/content/setup/clone.files (main) $ ^C ~/environment/aws-container-devsecops/content/setup/clone.files (main) $ sudo bash tools-install.sh INSTALLING docker Installing docker Loaded plugins: extras_suggestions, langpacks, priorities, update-motd Cleaning repos: amzn2-core amzn2extra-docker amzn2extra-epel amzn2extra-lamp-mariadb10.2-php7.2 epel hashicorp 35 metadata files removed 16 sqlite files removed 0 metadata files removed Loaded plugins: extras_suggestions, langpacks, priorities, update-motd amzn2-core | 3.7 kB 00:00:00 amzn2extra-docker | 3.0 kB 00:00:00 amzn2extra-epel | 3.0 kB 00:00:00 amzn2extra-lamp-mariadb10.2-php7.2 | 3.0 kB 00:00:00 epel/x86_64/metalink | 15 kB 00:00:00 epel | 4.7 kB 00:00:00 hashicorp | 1.4 kB 00:00:00 (1/13): amzn2-core/2/x86_64/group_gz | 2.5 kB 00:00:00 (2/13): amzn2-core/2/x86_64/updateinfo | 405 kB 00:00:00 (3/13): amzn2extra-epel/2/x86_64/primary_db | 1.8 kB 00:00:00 (4/13): amzn2extra-lamp-mariadb10.2-php7.2/2/x86_64/updateinfo | 76 B 00:00:00 (5/13): amzn2extra-lamp-mariadb10.2-php7.2/2/x86_64/primary_db | 506 kB 00:00:00 (6/13): amzn2extra-epel/2/x86_64/updateinfo | 76 B 00:00:00 (7/13): amzn2extra-docker/2/x86_64/primary_db | 79 kB 00:00:00 (8/13): amzn2extra-docker/2/x86_64/updateinfo | 76 B 00:00:00 (9/13): epel/x86_64/group_gz | 96 kB 00:00:00 (10/13): epel/x86_64/updateinfo | 1.0 MB 00:00:00 (11/13): epel/x86_64/primary_db | 6.9 MB 00:00:00 (12/13): hashicorp/2/x86_64/primary | 55 kB 00:00:00 (13/13): amzn2-core/2/x86_64/primary_db | 56 MB 00:00:00 hashicorp 384/384 242 packages excluded due to repository priority protections Resolving Dependencies --\u0026gt; Running transaction check ---\u0026gt; Package docker.x86_64 0:20.10.4-1.amzn2 will be installed --\u0026gt; Finished Dependency Resolution Dependencies Resolved ========================================================================================================================================== Package Arch Version Repository Size ========================================================================================================================================== Installing: docker x86_64 20.10.4-1.amzn2 amzn2extra-docker 32 M Transaction Summary ========================================================================================================================================== Install 1 Package Total download size: 32 M Installed size: 136 M Downloading packages: docker-20.10.4-1.amzn2.x86_64.rpm | 32 MB 00:00:00 Running transaction check Running transaction test Transaction test succeeded Running transaction Installing : docker-20.10.4-1.amzn2.x86_64 1/1 Verifying : docker-20.10.4-1.amzn2.x86_64 1/1 Installed: docker.x86_64 0:20.10.4-1.amzn2 Complete! 0 ansible2 available \\ [ =2.4.2 =2.4.6 =2.8 =stable ] 2 httpd_modules available [ =1.0 =stable ] 3 memcached1.5 available \\ [ =1.5.1 =1.5.16 =1.5.17 ] 5 postgresql9.6 available \\ [ =9.6.6 =9.6.8 =stable ] 6 postgresql10 available [ =10 =stable ] 9 R3.4 available [ =3.4.3 =stable ] 10 rust1 available \\ [ =1.22.1 =1.26.0 =1.26.1 =1.27.2 =1.31.0 =1.38.0 =stable ] 11 vim available [ =8.0 =stable ] 15 php7.2 available \\ [ =7.2.0 =7.2.4 =7.2.5 =7.2.8 =7.2.11 =7.2.13 =7.2.14 =7.2.16 =7.2.17 =7.2.19 =7.2.21 =7.2.22 =7.2.23 =7.2.24 =7.2.26 =stable ] 17 lamp-mariadb10.2-php7.2=latest enabled \\ [ =10.2.10_7.2.0 =10.2.10_7.2.4 =10.2.10_7.2.5 =10.2.10_7.2.8 =10.2.10_7.2.11 =10.2.10_7.2.13 =10.2.10_7.2.14 =10.2.10_7.2.16 =10.2.10_7.2.17 =10.2.10_7.2.19 =10.2.10_7.2.22 =10.2.10_7.2.23 =10.2.10_7.2.24 =stable ] 18 libreoffice available \\ [ =5.0.6.2_15 =5.3.6.1 =stable ] 19 gimp available [ =2.8.22 ] 20 docker=latest enabled \\ [ =17.12.1 =18.03.1 =18.06.1 =18.09.9 =stable ] 21 mate-desktop1.x available \\ [ =1.19.0 =1.20.0 =stable ] 22 GraphicsMagick1.3 available \\ [ =1.3.29 =1.3.32 =1.3.34 =stable ] 23 tomcat8.5 available \\ [ =8.5.31 =8.5.32 =8.5.38 =8.5.40 =8.5.42 =8.5.50 =stable ] 24 epel=latest enabled [ =7.11 =stable ] 25 testing available [ =1.0 =stable ] 26 ecs available [ =stable ] 27 corretto8 available \\ [ =1.8.0_192 =1.8.0_202 =1.8.0_212 =1.8.0_222 =1.8.0_232 =1.8.0_242 =stable ] 28 firecracker available [ =0.11 =stable ] 29 golang1.11 available \\ [ =1.11.3 =1.11.11 =1.11.13 =stable ] 30 squid4 available [ =4 =stable ] _ php7.3 available \\ [ =7.3.2 =7.3.3 =7.3.4 =7.3.6 =7.3.8 =7.3.9 =7.3.10 =7.3.11 =7.3.13 =stable ] 32 lustre2.10 available \\ [ =2.10.5 =2.10.8 =stable ] 33 java-openjdk11 available [ =11 =stable ] 34 lynis available [ =stable ] 35 kernel-ng available [ =stable ] 36 BCC available [ =0.x =stable ] 37 mono available [ =5.x =stable ] 38 nginx1 available [ =stable ] 39 ruby2.6 available [ =2.6 =stable ] 40 mock available [ =stable ] 41 postgresql11 available [ =11 =stable ] _ php7.4 available [ =stable ] 43 livepatch available [ =stable ] 44 python3.8 available [ =stable ] 45 haproxy2 available [ =stable ] 46 collectd available [ =stable ] 47 aws-nitro-enclaves-cli available [ =stable ] 48 R4 available [ =stable ] 49 kernel-5.4 available [ =stable ] 50 selinux-ng available [ =stable ] _ php8.0 available [ =stable ] 52 tomcat9 available [ =stable ] 53 unbound1.13 available [ =stable ] _ mariadb10.5 available [ =stable ] 55 kernel-5.10 available [ =stable ] 56 redis6 available [ =stable ] 57 ruby3.0 available [ =stable ] 58 postgresql12 available [ =stable ] 59 postgresql13 available [ =stable ] 60 mock2 available [ =stable ] Loaded plugins: extras_suggestions, langpacks, priorities, update-motd 242 packages excluded due to repository priority protections Package docker-20.10.4-1.amzn2.x86_64 already installed and latest version Nothing to do Redirecting to /bin/systemctl start docker.service Hello from Docker! This message shows that your installation appears to be working correctly. To generate this message, Docker took the following steps: 1. The Docker client contacted the Docker daemon. 2. The Docker daemon pulled the \u0026#34;hello-world\u0026#34; image from the Docker Hub. (amd64) 3. The Docker daemon created a new container from that image which runs the executable that produces the output you are currently reading. 4. The Docker daemon streamed that output to the Docker client, which sent it to your terminal. To try something more ambitious, you can run an Ubuntu container with: $ docker run -it ubuntu bash Share images, automate workflows, and more with a free Docker ID: https://hub.docker.com/ For more examples and ideas, visit: https://docs.docker.com/get-started/ INSTALLING kind % Total % Received % Xferd Average Speed Time Time Time Current Dload Upload Total Spent Left Speed 100 98 100 98 0 0 267 0 --:--:-- --:--:-- --:--:-- 267 100 624 100 624 0 0 1116 0 --:--:-- --:--:-- --:--:-- 1116 100 6660k 100 6660k 0 0 5931k 0 0:00:01 0:00:01 --:--:-- 15.7M INSTALLING terraform Loaded plugins: extras_suggestions, langpacks, priorities, update-motd Existing lock /var/run/yum.pid: another copy is running as pid 25715. Another app is currently holding the yum lock; waiting for it to exit... The other application is: yum Memory : 194 M RSS (410 MB VSZ) Started: Mon Aug 16 19:23:47 2021 - 00:07 ago State : Running, pid: 25715 Another app is currently holding the yum lock; waiting for it to exit... The other application is: yum Memory : 298 M RSS (514 MB VSZ) Started: Mon Aug 16 19:23:47 2021 - 00:09 ago State : Running, pid: 25715 Another app is currently holding the yum lock; waiting for it to exit... The other application is: yum Memory : 316 M RSS (532 MB VSZ) Started: Mon Aug 16 19:23:47 2021 - 00:11 ago State : Running, pid: 25715 Another app is currently holding the yum lock; waiting for it to exit... The other application is: yum Memory : 316 M RSS (532 MB VSZ) Started: Mon Aug 16 19:23:47 2021 - 00:13 ago State : Running, pid: 25715 242 packages excluded due to repository priority protections Resolving Dependencies --\u0026gt; Running transaction check ---\u0026gt; Package terraform.x86_64 0:1.0.4-1 will be installed --\u0026gt; Finished Dependency Resolution Dependencies Resolved ========================================================================================================================================== Package Arch Version Repository Size ========================================================================================================================================== Installing: terraform x86_64 1.0.4-1 hashicorp 25 M Transaction Summary ========================================================================================================================================== Install 1 Package Total download size: 25 M Installed size: 75 M Downloading packages: terraform-1.0.4-1.x86_64.rpm | 25 MB 00:00:00 Running transaction check Running transaction test Transaction test succeeded Running transaction Installing : terraform-1.0.4-1.x86_64 1/1 Verifying : terraform-1.0.4-1.x86_64 1/1 Installed: terraform.x86_64 0:1.0.4-1 Complete! INSTALLING eksctl INSTALLING kubectl % Total % Received % Xferd Average Speed Time Time Time Current Dload Upload Total Spent Left Speed 100 44.2M 100 44.2M 0 0 90.4M 0 --:--:-- --:--:-- --:--:-- 90.3M INSTALLING helm    Now since EKS takes about 20 mins to create a cluster we need to start that now so it\u0026rsquo;s ready when we need it.\n~/environment/devsecopspipeline (master) $ make cluster eksctl create cluster -f eks-config.yml 2021-09-11 21:58:05 [â„¹] eksctl version 0.61.0 2021-09-11 21:58:05 [â„¹] using region us-west-2 2021-09-11 21:58:05 [â„¹] setting availability zones to [us-west-2d us-west-2c us-west-2a] 2021-09-11 21:58:05 [â„¹] subnets for us-west-2d - public:192.168.0.0/19 private:192.168.96.0/19 2021-09-11 21:58:05 [â„¹] subnets for us-west-2c - public:192.168.32.0/19 private:192.168.128.0/19 2021-09-11 21:58:05 [â„¹] subnets for us-west-2a - public:192.168.64.0/19 private:192.168.160.0/19 2021-09-11 21:58:05 [â„¹] nodegroup \u0026#34;node-group-1\u0026#34; will use \u0026#34;ami-0bb07d9c8d6ca41e8\u0026#34; [AmazonLinux2/1.21] 2021-09-11 21:58:05 [â„¹] using Kubernetes version 1.21 2021-09-11 21:58:05 [â„¹] creating EKS cluster \u0026#34;devsecops\u0026#34; in \u0026#34;us-west-2\u0026#34; region with un-managed nodes 2021-09-11 21:58:05 [â„¹] 1 nodegroup (node-group-1) was included (based on the include/exclude rules) 2021-09-11 21:58:05 [â„¹] will create a CloudFormation stack for cluster itself and 1 nodegroup stack(s) 2021-09-11 21:58:05 [â„¹] will create a CloudFormation stack for cluster itself and 0 managed nodegroup stack(s) 2021-09-11 21:58:05 [â„¹] if you encounter any issues, check CloudFormation console or try \u0026#39;eksctl utils describe-stacks --region=us-west-2 --cluster=devsecops\u0026#39; 2021-09-11 21:58:05 [â„¹] CloudWatch logging will not be enabled for cluster \u0026#34;devsecops\u0026#34; in \u0026#34;us-west-2\u0026#34; 2021-09-11 21:58:05 [â„¹] you can enable it with \u0026#39;eksctl utils update-cluster-logging --enable-types={SPECIFY-YOUR-LOG-TYPES-HERE (e.g. all)} --region=us-west-2 --cluster=devsecops\u0026#39; 2021-09-11 21:58:05 [â„¹] Kubernetes API endpoint access will use default of {publicAccess=true, privateAccess=false} for cluster \u0026#34;devsecops\u0026#34; in \u0026#34;us-west-2\u0026#34; 2021-09-11 21:58:05 [â„¹] 2 sequential tasks: { create cluster control plane \u0026#34;devsecops\u0026#34;, 3 sequential sub-tasks: { wait for control plane to become ready, 1 task: { create addons }, create nodegroup \u0026#34;node-group-1\u0026#34; } } 2021-09-11 21:58:05 [â„¹] building cluster stack \u0026#34;eksctl-devsecops-cluster\u0026#34; 2021-09-11 21:58:06 [â„¹] deploying stack \u0026#34;eksctl-devsecops-cluster\u0026#34; "
},
{
	"uri": "//localhost:1313/development/",
	"title": "Development Environment",
	"tags": [],
	"description": "",
	"content": "  Git Commit Signing   Linting   Open Web Application Security Project   Pre Commit   3 Musketeers   "
},
{
	"uri": "//localhost:1313/development/signing/",
	"title": "Git Commit Signing",
	"tags": [],
	"description": "",
	"content": "Needed:\n GPG Key Keybase - optional Github Account  Generating a GPG Key  Generate a with gpg gpg --full-generate-key Select what key you want to use, ECC (sign and encrypt) default Select what elliptic curve you want, Curve 25519 default Fill out your name and your email address. Make sure this matches the one in your GitHub account. Add a comment if you want to remind you what the key is for. You may be prompted for a passphrase to add to the key for extra security  Here is what the prompts will look like.   Expand here is what it looks like in its entirety   Â± |main U:26 ?:9 âœ—| â†’ gpg --full-generate-key gpg (GnuPG) 2.3.1; Copyright (C) 2021 Free Software Foundation, Inc. This is free software: you are free to change and redistribute it. There is NO WARRANTY, to the extent permitted by law. Please select what kind of key you want: (1) RSA and RSA (2) DSA and Elgamal (3) DSA (sign only) (4) RSA (sign only) (9) ECC (sign and encrypt) *default* (10) ECC (sign only) (14) Existing key from card Your selection? 9 Please select which elliptic curve you want: (1) Curve 25519 *default* (4) NIST P-384 (6) Brainpool P-256 Your selection? 1 Please specify how long the key should be valid. 0 = key does not expire \u0026lt;n\u0026gt; = key expires in n days \u0026lt;n\u0026gt;w = key expires in n weeks \u0026lt;n\u0026gt;m = key expires in n months \u0026lt;n\u0026gt;y = key expires in n years Key is valid for? (0) 0 Key does not expire at all Is this correct? (y/N) y GnuPG needs to construct a user ID to identify your key. Real name: James Strong Email address: strong.james.e@gmail.com Comment: testing for workshop You selected this USER-ID: \u0026#34;James Strong (testing for workshop) \u0026lt;strong.james.e@gmail.com\u0026gt;\u0026#34; Change (N)ame, (C)omment, (E)mail or (O)kay/(Q)uit? O We need to generate a lot of random bytes. It is a good idea to perform some other action (type on the keyboard, move the mouse, utilize the disks) during the prime generation; this gives the random number generator a better chance to gain enough entropy. We need to generate a lot of random bytes. It is a good idea to perform some other action (type on the keyboard, move the mouse, utilize the disks) during the prime generation; this gives the random number generator a better chance to gain enough entropy. gpg: key 8246A1EC900B5E30 marked as ultimately trusted gpg: directory \u0026#39;/Users/strongjz/.gnupg/openpgp-revocs.d\u0026#39; created gpg: revocation certificate stored as \u0026#39;/Users/strongjz/.gnupg/openpgp-revocs.d/3E0424931246D33A86890BC78246A1EC900B5E30.rev\u0026#39; public and secret key created and signed. pub ed25519 2021-08-17 [SC] 3E0424931246D33A86890BC78246A1EC900B5E30 uid James Strong (testing for workshop) \u0026lt;strong.james.e@gmail.com\u0026gt; sub cv25519 2021-08-17 [E]    Added it to Github Account  Export public key  gpg --list-keys gpg --armor --export 3E0424931246D33A86890BC78246A1EC900B5E30 -----BEGIN PGP PUBLIC KEY BLOCK----- mDMEYRwLhBYJKwYBBAHaRw8BAQdAsQbWuqV2P5y1HXlkoFTM9qyrypc+zB9YO/fI DYAjZ6C0PkphbWVzIFN0cm9uZyAodGVzdGluZyBmb3Igd29ya3Nob3ApIDxzdHJv bmcuamFtZXMuZUBnbWFpbC5jb20+iJQEExYKADwWIQQ+BCSTEkbTOoaJC8eCRqHs kAteMAUCYRwLhAIbAwULCQgHAgMiAgEGFQoJCAsCBBYCAwECHgcCF4AACgkQgkah 7JALXjDeKgEA1JtsGyIEg8ZUANvkbJfdNEs2e1Ns/M3PcRYMUxc1yugA/3tHEDJb Fw+QghwzcHXWsqlkAmj5TZglHyfYsbwlgzoLuDgEYRwLhBIKKwYBBAGXVQEFAQEH QGg2S81eJftEiG4AeiKC3D6H94y1ifSuTZ6BBofcilsTAwEIB4h4BBgWCgAgFiEE PgQkkxJG0zqGiQvHgkah7JALXjAFAmEcC4QCGwwACgkQgkah7JALXjCVgwD+Ob4+ fG5zzmP/Hg13SFsxLZc+5EKrxHJ1z+bNQQ5ARxYBANbOuPnxLtPL4eY4TqIY0k1X 8HmXv9JXEwMHLYiN4fwF =03gp -----END PGP PUBLIC KEY BLOCK----- Open https://github.com/settings/keys  Copy and Paste the Public Key into your GitHub account  Add to git config and verify  Get the key id for the one we just created.  $ gpg --list-secret-keys --keyid-format LONG sec ed25519/8246A1EC900B5E30 2021-08-17 [SC] 3E0424931246D33A86890BC78246A1EC900B5E30 uid [ultimate] James Strong (testing for workshop) \u0026lt;strong.james.e@gmail.com\u0026gt; ssb cv25519/0BAFF11345FB8338 2021-08-17 [E] Update git config to use the key.  $ git config --global user.signingkey 3E0424931246D33A86890BC78246A1EC900B5E30 $ git config --global commit.gpgsign true Test a Commit.  Â± |main S:2 U:28 ?:11 âœ—| â†’ git add -A Â± |main S:42 âœ—| â†’ git commit -m \u0026#34;signing \u0026#34; [main b2a6fb5] signing In the commit history you can see a \u0026ldquo;Verified\u0026rdquo; tag on your commits now\nMake sure to store this GPG private key in a secure location\n To export the key use this.\n Identify your private key: gpg --list-secret-keys strong.james.e@gmail.com  sec ed25519 2021-08-17 [SC] 3E0424931246D33A86890BC78246A1EC900B5E30 uid [ultimate] James Strong (testing for workshop) \u0026lt;strong.james.e@gmail.com\u0026gt; ssb cv25519 2021-08-17 [E] Run this command to export your key: gpg --export-secret-keys 3E0424931246D33A86890BC78246A1EC900B5E30 \u0026gt; private.key  If you have a passphrase on the key you\u0026rsquo;ll have to enter it to export it.\n Copy the key file to another secure location.\n  To import on a new machine, run\n  gpg --import private.key Sources:\nUsing Keybase: https://github.com/pstadler/keybase-gpg-github\nPlain GPG: https://docs.github.com/en/github/authenticating-to-github/managing-commit-signature-verification/generating-a-new-gpg-key\n"
},
{
	"uri": "//localhost:1313/development/linting/",
	"title": "Linting",
	"tags": [],
	"description": "",
	"content": "Linting is the process of analyzing code for syntax issues; it can aid in finding bugs and performance issues, offers simplifications, and enforces style rules.\nOther notable uses for Linting:\n formatting discrepancy, go fmt. non-adherence to coding standards and conventions, shellchecker for example diagnosing possible logical errors in your applications. go vet Interpreted languages like Python, Ruby, and JavaScript benefit from linting, as these languages donâ€™t have a compiling phase to display errors before execution.  Here is great collection of Linters for many languages\nhttps://github.com/collections/clean-code-linters\nMy go to everyday linters\nhttps://github.com/koalaman/shellcheck\nSome languages like go have them builtin\n2021-08-24 09:47:02 âŒš strongjz-macbook in ~/Documents/code/go/src/github.com/strongjz/go_example_app Â± |master âœ“| â†’ go vet go: downloading github.com/gin-gonic/gin v1.6.2 go: downloading github.com/gin-contrib/sse v0.1.0 go: downloading github.com/ugorji/go v1.1.7 go: downloading github.com/golang/protobuf v1.3.3 go: downloading golang.org/x/sys v0.0.0-20200116001909-b77594299b42 go: downloading github.com/go-playground/validator/v10 v10.2.0 go: downloading github.com/ugorji/go/codec v1.1.7 go: downloading github.com/leodido/go-urn v1.2.0 $ go doc cmd/vet Vet examines Go source code and reports suspicious constructs, such as Printf calls whose arguments do not align with the format string. Vet uses heuristics that do not guarantee all reports are genuine problems, but it can find errors not caught by the compilers. It can be invoked three ways: By package, from the go tool: go vet package/path/name vets the package whose path is provided. By files: go tool vet source/directory/*.go : For Dockerfiles we can use tools like hadolint\n:~/environment $ docker run --rm -i hadolint/hadolint:v2.7.0 \u0026lt; ./content/development/development.files/Dockerfile -:1 DL3006 warning: Always tag the version of an image explicitly -:2 DL3015 info: Avoid additional packages by specifying `--no-install-recommends` -:2 DL3009 info: Delete the apt-get lists after installing something -:2 SC2154 warning: node_verion is referenced but not assigned (did you mean \u0026#39;node_version\u0026#39;?). -:4 DL3045 warning: `COPY` to a relative destination without `WORKDIR` set. -:5 DL3003 warning: Use WORKDIR to switch to a directory -:5 DL3016 warning: Pin versions in npm. Instead of `npm install \u0026lt;package\u0026gt;` use `npm install \u0026lt;package\u0026gt;@\u0026lt;version\u0026gt;` -:8 DL3011 error: Valid UNIX ports range from 0 to 65535 "
},
{
	"uri": "//localhost:1313/development/owasp/",
	"title": "Open Web Application Security Project",
	"tags": [],
	"description": "",
	"content": "The OWASP Top 10 is a standard awareness document for developers and web application security. It represents a broad consensus about the most critical security risks to web applications.\nOWASP Top 10   A1:2017-Injection   Injection flaws, such as SQL, NoSQL, OS, and LDAP injection, occur when untrusted data is sent to an interpreter as part of a command or query. The attackerâ€™s hostile data can trick the interpreter into executing unintended commands or accessing data without proper authorization.\n    A2:2017-Broken Authentication   Application functions related to authentication and session management are often implemented incorrectly, allowing attackers to compromise passwords, keys, or session tokens, or to exploit other implementation flaws to assume other usersâ€™ identities temporarily or permanently.\n    A3:2017-Sensitive Data Exposure   Many web applications and APIs do not properly protect sensitive data, such as financial, healthcare, and PII. Attackers may steal or modify such weakly protected data to conduct credit card fraud, identity theft, or other crimes. Sensitive data may be compromised without extra protection, such as encryption at rest or in transit, and requires special precautions when exchanged with the browser.\n    A4:2017-XML External Entities (XXE)   Many older or poorly configured XML processors evaluate external entity references within XML documents. External entities can be used to disclose internal files using the file URI handler, internal file shares, internal port scanning, remote code execution, and denial of service attacks.\n    A5:2017-Broken Access Control   Restrictions on what authenticated users are allowed to do are often not properly enforced. Attackers can exploit these flaws to access unauthorized functionality and/or data, such as access other usersâ€™ accounts, view sensitive files, modify other usersâ€™ data, change access rights, etc.\n    A6:2017-Security Misconfiguration   Security misconfiguration is the most commonly seen issue. This is commonly a result of insecure default configurations, incomplete or ad hoc configurations, open cloud storage, misconfigured HTTP headers, and verbose error messages containing sensitive information. Not only must all operating systems, frameworks, libraries, and applications be securely configured, but they must be patched/upgraded in a timely fashion.\n    A7:2017-Cross-Site Scripting XSS   XSS flaws occur whenever an application includes untrusted data in a new web page without proper validation or escaping, or updates an existing web page with user-supplied data using a browser API that can create HTML or JavaScript. XSS allows attackers to execute scripts in the victimâ€™s browser which can hijack user sessions, deface web sites, or redirect the user to malicious sites.\n    A8:2017-Insecure Deserialization   Insecure deserialization often leads to remote code execution. Even if deserialization flaws do not result in remote code execution, they can be used to perform attacks, including replay attacks, injection attacks, and privilege escalation attacks.\n    A9:2017-Using Components with Known Vulnerabilities   Components, such as libraries, frameworks, and other software modules, run with the same privileges as the application. If a vulnerable component is exploited, such an attack can facilitate serious data loss or server takeover. Applications and APIs using components with known vulnerabilities may undermine application defenses and enable various attacks and impacts.\n    A10:2017-Insufficient Logging \u0026amp; Monitoring   Insufficient logging and monitoring, coupled with missing or ineffective integration with incident response, allows attackers to further attack systems, maintain persistence, pivot to more systems, and tamper, extract, or destroy data. Most breach studies show time to detect a breach is over 200 days, typically detected by external parties rather than internal processes or monitoring.\n  Handy Cheatsheets https://cheatsheetseries.owasp.org/index.html\nSecure Coding Practices https://github.com/OWASP/Go-SCP/blob/master/dist/go-webapp-scp.pdf\n"
},
{
	"uri": "//localhost:1313/development/pre-commit/",
	"title": "Pre Commit",
	"tags": [],
	"description": "",
	"content": "Introduction The pre-commit hook is run first, before you even type in a commit message. Itâ€™s used to inspect the snapshot thatâ€™s about to be committed,\nIt can be used to detect\n missing semicolons trailing whitespace debug statements aws credentials private keys  Pre-commit is a framework for managing and maintaining multi-language pre-commit hooks.\nhttps://github.com/pre-commit/pre-commit\n detect-aws-credentials - Checks for the existence of AWS secrets that you have set up with the AWS CLI. The following arguments are available detect-private-key - Checks for the existence of private keys. check-xml - This hook checks xml files for parseable syntax. check-yaml - This hook checks yaml files for parseable syntax. check-json - This hook checks json files for parseable syntax. check-shebang-scripts-are-executable - Ensures that (non-binary) files with a shebang are executable. pretty-format-json - This hook sets a standard for formatting JSON files. check-merge-conflict - Check for files that contain merge conflict strings.  Install :~/environment $ pip install pre-commit :~/environment $ pre-commit --version pre-commit 1.21.0 Configure We have already created the .pre-commit-config.yaml in the Files directory\nrepos: - repo: https://github.com/pre-commit/pre-commit-hooks rev: v2.3.0 hooks: - id: detect-private-key Test :~/environment $ cd ~/environment/aws-container-devsecops/content/development.files Using the pre-commit hook cli we can run the checks and see that the commit would fail.\n:~/environment $ pre-commit run --all-files Detect Private Key.......................................................Failed - hook id: detect-private-key - exit code: 1 Private key found: content/development/development.files/secret.yaml "
},
{
	"uri": "//localhost:1313/development/3-musketeers/",
	"title": "3 Musketeers",
	"tags": [],
	"description": "",
	"content": "Tools used in the 3 Musketeers pattern:\n Make Docker Docker Compose  From https://3musketeers.io/\nConsistency - Run the same commands no matter where you are: Linux, macOS, Windows, CI/CD tools that supports Docker like GitHub Actions, Travis CI, CircleCI, and GitLab CI.\nControl - Take control of languages, versions, and tools you need, and version source control your pipelines with your preferred VCS like GitHub and GitLab.\nConfidence - Test your code and pipelines locally before your CI/CD tool runs it. Feel confident that if it works locally, it will work in your CI/CD server.\n  3M Example   Dockerfile  (0 kb)   Makefile  (0 kb)   docker-compose.yml  (0 kb)    :~/environment $ cd ~/environment/aws-container-devsecops/content/development/3-musketeers.files/ :~/environment $ make echo docker-compose run --rm alpine echo \u0026#39;Hello, World!\u0026#39; [+] Running 1/1 â ¿ Network 3-musketeersfiles_default Created 0.4s [+] Running 2/2 â ¿ alpine Pulled 4.7s â ¿ a0d0a0d46f8b Pull complete 2.9s Hello, World! :~/environment $ "
},
{
	"uri": "//localhost:1313/build/",
	"title": "Container Builds",
	"tags": [],
	"description": "",
	"content": " One process per container  CMD [\u0026#34;nginx\u0026#34;, \u0026#34;-g\u0026#34;, \u0026#34;daemon off;\u0026#34;]  Run with local user  FROM alpine:3.14.2 RUN groupadd -r swuser -g 433 \u0026amp;\u0026amp; \\ useradd -u 431 -r -g swuser -s /sbin/nologin -c \u0026#34;Docker image user\u0026#34; swuser USER root RUN apk update \u0026amp;\u0026amp; apk upgrade RUN apk add --update curl \u0026amp;\u0026amp; \\ rm -rf /var/cache/apk/* USER swuser  Write logs to stdout \u0026amp; stderr Leverage environment variables  docker run -e MYVAR1 --env MYVAR2=foo --env-file ./env.list ubuntu bash   Config\n Separating environmental concerns Use environment variables to define runtime parameters, as opposed to hard config files. Mount configuration files    Secrets â€“ Application secrets should be instantiated at run-time.\n  "
},
{
	"uri": "//localhost:1313/build/container/",
	"title": "Secure Containers",
	"tags": [],
	"description": "",
	"content": "Baseline  DISABLE ROOT  Mount the container\u0026rsquo;s root filesystem as read-only set k8s Security context set Linux Capabilities Disable privilege escalation    securityContext: allowPrivilegeEscalation: false  Least Privilege by defining user  apiVersion: v1 kind: Pod metadata: name: pod-security spec: securityContext: runAsUser: 10000 runAsGroup: 30000 fsGroup: 20000  Run time Protections  SELinux, AppArmor, Auditd, Falco   Network policies Container Capabilities  capabilities: add: [\u0026#34;NET_ADMIN\u0026#34;, \u0026#34;SYS_TIME\u0026#34;]  DISABLE ROOT  Helpers Versioning\n Invest in Strategy Containers follow build Versions of Software  Semantic Versioning   Metadata  LABEL \u0026lt;key\u0026gt;=\u0026lt;value\u0026gt; \u0026lt;key\u0026gt;=\u0026lt;value\u0026gt; \u0026lt;key\u0026gt;=\u0026lt;value\u0026gt; ... LABEL \u0026#34;com.example.vendor\u0026#34;=\u0026#34;ACME Incorporated\u0026#34; LABEL com.example.label-with-value=\u0026#34;foo\u0026#34; LABEL version=\u0026#34;1.0\u0026#34; LABEL description=\u0026#34;This text illustrates \\ that label-values can span multiple lines.\u0026#34; No really do this Latest Tag\n Avoid using :latest tags Unable to control Unknown updates Versions the way to go Container digest most secure  Reduce, reuse Base Container\n Reduce Build Times Scratch Container Golden images  "
},
{
	"uri": "//localhost:1313/build/exercise/",
	"title": "Secure Containers Exercise",
	"tags": [],
	"description": "",
	"content": "Navigate to DevSecops repo\ncd ~/environment/devsecopspipeline ~/environment/devsecopspipeline/: export DB_PASSWORD=temppassword Run locally ~/environment/devsecopspipeline (master) $ make run env GIT_TERMINAL_PROMPT=1 go get -d -v . github.com/strongjz/go_example_app (download) created GOPATH=/home/ec2-user/go; see \u0026#39;go help gopath\u0026#39; github.com/gin-gonic/gin (download) github.com/gin-contrib/sse (download) github.com/go-playground/validator (download) github.com/go-playground/universal-translator (download) github.com/go-playground/locales (download) github.com/leodido/go-urn (download) get \u0026#34;golang.org/x/crypto/sha3\u0026#34;: found meta tag get.metaImport{Prefix:\u0026#34;golang.org/x/crypto\u0026#34;, VCS:\u0026#34;git\u0026#34;, RepoRoot:\u0026#34;https://go.googlesource.com/crypto\u0026#34;} at //golang.org/x/crypto/sha3?go-get=1 get \u0026#34;golang.org/x/crypto/sha3\u0026#34;: verifying non-authoritative meta tag golang.org/x/crypto (download) get \u0026#34;golang.org/x/text/language\u0026#34;: found meta tag get.metaImport{Prefix:\u0026#34;golang.org/x/text\u0026#34;, VCS:\u0026#34;git\u0026#34;, RepoRoot:\u0026#34;https://go.googlesource.com/text\u0026#34;} at //golang.org/x/text/language?go-get=1 get \u0026#34;golang.org/x/text/language\u0026#34;: verifying non-authoritative meta tag golang.org/x/text (download) github.com/ugorji/go (download) get \u0026#34;google.golang.org/protobuf/proto\u0026#34;: found meta tag get.metaImport{Prefix:\u0026#34;google.golang.org/protobuf\u0026#34;, VCS:\u0026#34;git\u0026#34;, RepoRoot:\u0026#34;https://go.googlesource.com/protobuf\u0026#34;} at //google.golang.org/protobuf/proto?go-get=1 get \u0026#34;google.golang.org/protobuf/proto\u0026#34;: verifying non-authoritative meta tag google.golang.org/protobuf (download) get \u0026#34;gopkg.in/yaml.v2\u0026#34;: found meta tag get.metaImport{Prefix:\u0026#34;gopkg.in/yaml.v2\u0026#34;, VCS:\u0026#34;git\u0026#34;, RepoRoot:\u0026#34;https://gopkg.in/yaml.v2\u0026#34;} at //gopkg.in/yaml.v2?go-get=1 gopkg.in/yaml.v2 (download) github.com/mattn/go-isatty (download) get \u0026#34;golang.org/x/sys/unix\u0026#34;: found meta tag get.metaImport{Prefix:\u0026#34;golang.org/x/sys\u0026#34;, VCS:\u0026#34;git\u0026#34;, RepoRoot:\u0026#34;https://go.googlesource.com/sys\u0026#34;} at //golang.org/x/sys/unix?go-get=1 get \u0026#34;golang.org/x/sys/unix\u0026#34;: verifying non-authoritative meta tag golang.org/x/sys (download) github.com/lib/pq (download) go run main.go Starting App Starting App Engine [GIN-debug] [WARNING] Running in \u0026#34;debug\u0026#34; mode. Switch to \u0026#34;release\u0026#34; mode in production. - using env: export GIN_MODE=release - using code: gin.SetMode(gin.ReleaseMode) [GIN-debug] GET / --\u0026gt; github.com/strongjz/go_example_app/app.rootHandler (3 handlers) [GIN-debug] GET /ping --\u0026gt; github.com/strongjz/go_example_app/app.pingHandler (3 handlers) [GIN-debug] GET /data --\u0026gt; github.com/strongjz/go_example_app/app.dataHandler (3 handlers) [GIN-debug] GET /secret --\u0026gt; github.com/strongjz/go_example_app/app.secretHandler (3 handlers) [GIN-debug] GET /host --\u0026gt; github.com/strongjz/go_example_app/app.hostHandler (3 handlers) [GIN-debug] GET /external --\u0026gt; github.com/strongjz/go_example_app/app.externalHandler (3 handlers) [GIN-debug] Environment variable PORT=\u0026#34;8080\u0026#34; [GIN-debug] Listening and serving HTTP on :8080 [GIN-debug] [ERROR] listen tcp :8080: bind: address already in use ~/environment/devsecopspipeline (master) $ make run env GIT_TERMINAL_PROMPT=1 go get -d -v . go run main.go Starting App Starting App Engine [GIN-debug] [WARNING] Running in \u0026#34;debug\u0026#34; mode. Switch to \u0026#34;release\u0026#34; mode in production. - using env: export GIN_MODE=release - using code: gin.SetMode(gin.ReleaseMode) [GIN-debug] GET / --\u0026gt; github.com/strongjz/go_example_app/app.rootHandler (3 handlers) [GIN-debug] GET /ping --\u0026gt; github.com/strongjz/go_example_app/app.pingHandler (3 handlers) [GIN-debug] GET /data --\u0026gt; github.com/strongjz/go_example_app/app.dataHandler (3 handlers) [GIN-debug] GET /secret --\u0026gt; github.com/strongjz/go_example_app/app.secretHandler (3 handlers) [GIN-debug] GET /host --\u0026gt; github.com/strongjz/go_example_app/app.hostHandler (3 handlers) [GIN-debug] GET /external --\u0026gt; github.com/strongjz/go_example_app/app.externalHandler (3 handlers) [GIN-debug] Environment variable PORT=\u0026#34;8080\u0026#34; [GIN-debug] Listening and serving HTTP on :8080 Test\n~/environment/devsecopspipeline (master) $ curl localhost:8080/ {\u0026#34;message\u0026#34;:\u0026#34;Default Page\u0026#34;} ~/environment/devsecopspipeline (master) $ curl localhost:8080/data {\u0026#34;message\u0026#34;:\u0026#34;DB is not connected\u0026#34;} Running in Docker Compose ~/environment/devsecopspipeline (master) $ export DB_PASSWORD=temppassword ~/environment/devsecopspipeline (master) $ make compose_up docker-compose up Recreating devsecopspipeline_db_1 ... done Recreating devsecopspipeline_go-example_1 ... done Attaching to devsecopspipeline_db_1, devsecopspipeline_go-example_1 db_1 | The files belonging to this database system will be owned by user \u0026#34;postgres\u0026#34;. db_1 | This user must also own the server process. db_1 | db_1 | The database cluster will be initialized with locale \u0026#34;en_US.utf8\u0026#34;. db_1 | The default database encoding has accordingly been set to \u0026#34;UTF8\u0026#34;. db_1 | The default text search configuration will be set to \u0026#34;english\u0026#34;. db_1 | db_1 | Data page checksums are disabled. db_1 | db_1 | fixing permissions on existing directory /var/lib/postgresql/data ... ok db_1 | creating subdirectories ... ok db_1 | selecting dynamic shared memory implementation ... posix db_1 | selecting default max_connections ... 100 db_1 | selecting default shared_buffers ... 128MB db_1 | selecting default time zone ... Etc/UTC db_1 | creating configuration files ... ok db_1 | running bootstrap script ... ok db_1 | performing post-bootstrap initialization ... ok db_1 | syncing data to disk ... ok db_1 | db_1 | initdb: warning: enabling \u0026#34;trust\u0026#34; authentication for local connections db_1 | You can change this by editing pg_hba.conf or using the option -A, or db_1 | --auth-local and --auth-host, the next time you run initdb. db_1 | db_1 | Success. You can now start the database server using: db_1 | db_1 | pg_ctl -D /var/lib/postgresql/data -l logfile start db_1 | db_1 | waiting for server to start....2021-09-11 22:16:05.430 UTC [47] LOG: starting PostgreSQL 12.2 (Debian 12.2-2.pgdg100+1) on x86_64-pc-linux-gnu, compiled by gcc (Debian 8.3.0-6) 8.3.0, 64-bit db_1 | 2021-09-11 22:16:05.432 UTC [47] LOG: listening on Unix socket \u0026#34;/var/run/postgresql/.s.PGSQL.5432\u0026#34; db_1 | 2021-09-11 22:16:05.455 UTC [48] LOG: database system was shut down at 2021-09-11 22:16:05 UTC db_1 | 2021-09-11 22:16:05.460 UTC [47] LOG: database system is ready to accept connections go-example_1 | Starting App go-example_1 | Starting App Engine go-example_1 | [GIN-debug] [WARNING] Running in \u0026#34;debug\u0026#34; mode. Switch to \u0026#34;release\u0026#34; mode in production. go-example_1 | - using env: export GIN_MODE=release go-example_1 | - using code: gin.SetMode(gin.ReleaseMode) go-example_1 | go-example_1 | [GIN-debug] GET / --\u0026gt; github.com/strongjz/go_example_app/app.rootHandler (3 handlers) go-example_1 | [GIN-debug] GET /ping --\u0026gt; github.com/strongjz/go_example_app/app.pingHandler (3 handlers) go-example_1 | [GIN-debug] GET /data --\u0026gt; github.com/strongjz/go_example_app/app.dataHandler (3 handlers) go-example_1 | [GIN-debug] GET /secret --\u0026gt; github.com/strongjz/go_example_app/app.secretHandler (3 handlers) go-example_1 | [GIN-debug] GET /host --\u0026gt; github.com/strongjz/go_example_app/app.hostHandler (3 handlers) go-example_1 | [GIN-debug] GET /external --\u0026gt; github.com/strongjz/go_example_app/app.externalHandler (3 handlers) go-example_1 | [GIN-debug] Environment variable PORT=\u0026#34;8080\u0026#34; go-example_1 | [GIN-debug] Listening and serving HTTP on :8080 go-example_1 | [GIN-debug] [WARNING] Creating an Engine instance with the Logger and Recovery middleware already attached. go-example_1 | go-example_1 | [GIN-debug] [WARNING] Running in \u0026#34;debug\u0026#34; mode. Switch to \u0026#34;release\u0026#34; mode in production. go-example_1 | - using env: export GIN_MODE=release go-example_1 | - using code: gin.SetMode(gin.ReleaseMode) go-example_1 | go-example_1 | [GIN-debug] GET /admin --\u0026gt; main.main.func1.1 (3 handlers) go-example_1 | [GIN-debug] Listening and serving HTTP on :8090 db_1 | done db_1 | server started db_1 | db_1 | /usr/local/bin/docker-entrypoint.sh: ignoring /docker-entrypoint-initdb.d/* db_1 | db_1 | 2021-09-11 22:16:05.517 UTC [47] LOG: received fast shutdown request db_1 | waiting for server to shut down....2021-09-11 22:16:05.519 UTC [47] LOG: aborting any active transactions db_1 | 2021-09-11 22:16:05.520 UTC [47] LOG: background worker \u0026#34;logical replication launcher\u0026#34; (PID 54) exited with exit code 1 db_1 | 2021-09-11 22:16:05.523 UTC [49] LOG: shutting down db_1 | 2021-09-11 22:16:05.536 UTC [47] LOG: database system is shut down db_1 | done db_1 | server stopped db_1 | db_1 | PostgreSQL init process complete; ready for start up. db_1 | db_1 | 2021-09-11 22:16:05.630 UTC [1] LOG: starting PostgreSQL 12.2 (Debian 12.2-2.pgdg100+1) on x86_64-pc-linux-gnu, compiled by gcc (Debian 8.3.0-6) 8.3.0, 64-bit db_1 | 2021-09-11 22:16:05.630 UTC [1] LOG: listening on IPv4 address \u0026#34;0.0.0.0\u0026#34;, port 5432 db_1 | 2021-09-11 22:16:05.630 UTC [1] LOG: listening on IPv6 address \u0026#34;::\u0026#34;, port 5432 db_1 | 2021-09-11 22:16:05.634 UTC [1] LOG: listening on Unix socket \u0026#34;/var/run/postgresql/.s.PGSQL.5432\u0026#34; db_1 | 2021-09-11 22:16:05.649 UTC [56] LOG: database system was shut down at 2021-09-11 22:16:05 UTC db_1 | 2021-09-11 22:16:05.653 UTC [1] LOG: database system is ready to accept connections Once it is up we can test the applications running locally\n~/environment/devsecopspipeline (master) $ curl localhost:8080/ {\u0026#34;message\u0026#34;:\u0026#34;Default Page\u0026#34;} ~/environment/devsecopspipeline (master) $ curl localhost:8080/ping {\u0026#34;message\u0026#34;:\u0026#34;Pong Version `0.1.20`\u0026#34;} ~/environment/devsecopspipeline (master) $ curl localhost:8080/data {\u0026#34;message\u0026#34;:\u0026#34;Database Connected\u0026#34;} Let\u0026rsquo;s create a user for the application and rebuild our image\nAdd these lines to the dockerfile to create a new user\n# Create appuser. ENV USER=appuser ENV UID=10001 # See https://stackoverflow.com/a/55757473/12429735RUN RUN adduser \\  --disabled-password \\  --gecos \u0026#34;\u0026#34; \\  --home \u0026#34;/nonexistent\u0026#34; \\  --shell \u0026#34;/sbin/nologin\u0026#34; \\  --no-create-home \\  --uid \u0026#34;${UID}\u0026#34; \\  \u0026#34;${USER}\u0026#34; Inside the scratch container add these lines.\n# Import the user and group files from the builder. COPY --from=builder /etc/passwd /etc/passwd COPY --from=builder /etc/group /etc/group # Use an unprivileged user. USER appuser:appuser The Dockerfile should look like this now\nFROMgolang:1.13-alpine AS builderRUN apk update \u0026amp;\u0026amp; apk add --no-cache git# Create appuser.ENV USER=appuser ENV UID=10001 # See https://stackoverflow.com/a/55757473/12429735RUNRUN adduser \\  --disabled-password \\  --gecos \u0026#34;\u0026#34; \\  --home \u0026#34;/nonexistent\u0026#34; \\  --shell \u0026#34;/sbin/nologin\u0026#34; \\  --no-create-home \\  --uid \u0026#34;${UID}\u0026#34; \\  \u0026#34;${USER}\u0026#34;WORKDIR/go/src/appCOPY . .RUN GIT_TERMINAL_PROMPT=1 go get -d -vRUN CGO_ENABLED=0 go build -o /go/bin/appFROMgolang:1.13-alpineCOPY --from=builder /go/bin/app /go/bin/app# Import the user and group files from the builder.COPY --from=builder /etc/passwd /etc/passwdCOPY --from=builder /etc/group /etc/group# Use an unprivileged user.USERappuser:appuserEXPOSE8080EXPOSE8090CMD [\u0026#34;/go/bin/app\u0026#34;]"
},
{
	"uri": "//localhost:1313/pipeline/",
	"title": "Container Pipeline",
	"tags": [],
	"description": "",
	"content": "Running Rules for CI/CD  Maintain a code repository Automate the build Keep the build fast Make the build self-testing Commit early, commit often Every commit to the mainline gets built Everyone can see the results of the build Automate the deployment  Things to Secure the Container Pipeline  Secure Pipelines Image scanning Signed Images Verify Trusted Images Kickoff Security Assessment  "
},
{
	"uri": "//localhost:1313/pipeline/intro_exercise/",
	"title": "Container Pipeline Exercise Overview",
	"tags": [],
	"description": "",
	"content": "AWS CI/CD We are going to deploy a pipeline with AWS Services\nBuild - Build our golang example applications, in a docker container and stores it in the AWS ECR\nInvoke - Runs the Go Report Static Code analysis\nDeploy - deploys the application via Code build, aws eks cli and kubectl\n"
},
{
	"uri": "//localhost:1313/pipeline/exercise/",
	"title": "Container Pipeline Exercise",
	"tags": [],
	"description": "",
	"content": "First Create the state file s3 bucket aws s3 mb s3://devsecops-james-strong --region us-west-2 make_bucket: devsecops-james-strong Inside our Terraform Directory in the devsecops repo\nUpdate the devsecopspipeline/terraform/config.tf with the bucket name to store terraform state\nterraform { backend \u0026#34;s3\u0026#34; { bucket = \u0026#34;devsecops-james-strong\u0026#34; key = \u0026#34;devsecops-james-strong/terraform_state\u0026#34; region = \u0026#34;us-west-2\u0026#34; } } Initialize the Terraform cd devsecopspipeline/ make tf_clean tf_init cd terraform/ \u0026amp;\u0026amp; \\ rm -rf .terraform \\ rm -rf plan.out cd terraform/ \u0026amp;\u0026amp; \\ terraform init Initializing the backend... Successfully configured the backend \u0026#34;s3\u0026#34;! Terraform will automatically use this backend unless the backend configuration changes. Initializing provider plugins... - Finding hashicorp/aws versions matching \u0026#34;~\u0026gt; 3.0\u0026#34;... - Installing hashicorp/aws v3.58.0... - Installed hashicorp/aws v3.58.0 (signed by HashiCorp) Terraform has created a lock file .terraform.lock.hcl to record the provider selections it made above. Include this file in your version control repository so that Terraform can guarantee to make the same selections by default when you run \u0026#34;terraform init\u0026#34; in the future. Terraform has been successfully initialized! You may now begin working with Terraform. Try running \u0026#34;terraform plan\u0026#34; to see any changes that are required for your infrastructure. All Terraform commands should now work. If you ever set or change modules or backend configuration for Terraform, rerun this command to reinitialize your working directory. If you forget, other commands will detect it and remind you to do so if necessary. Terraform Plan Terraform Plan\nmake tf_plan cd terraform/ \u0026amp;\u0026amp; \\ terraform plan -out=plan.out    Expand here is what it looks like in its entirety   aws_iam_policy.allow-eks-asg: Refreshing state... [id=arn:aws:iam::123456789012:policy/eks-devsecops-allow-eks-asg] aws_s3_bucket.codepipeline_bucket: Refreshing state... [id=houston-devsecops-code] aws_ecr_repository.golang_example: Refreshing state... [id=golang_example-houston] aws_codecommit_repository.devsecops: Refreshing state... [id=houston-devsecops-repo] aws_iam_role.codepipeline_role: Refreshing state... [id=houston-test-role] aws_iam_role.main: Refreshing state... [id=eks-devsecops] aws_iam_role.devsecops-austin-codebuild: Refreshing state... [id=devsecops-houston-codebuild] aws_cloudwatch_log_group.codebuild: Refreshing state... [id=devsecops-houston-codebuild] aws_s3_bucket.codebuild_s3: Refreshing state... [id=devsecops-houston-codebuild] aws_cloudwatch_log_stream.codebuild: Refreshing state... [id=devsecops-houston-codebuild] aws_ssm_parameter.account_id: Refreshing state... [id=ACCOUNT_ID] aws_codebuild_project.devsecops-austin-codebuild-BUILD: Refreshing state... [id=arn:aws:codebuild:us-west-2:123456789012:project/devsecops-houston-codebuild-BUILD] aws_iam_role_policy_attachment.AmazonEKSClusterPolicy: Refreshing state... [id=devsecops-houston-codebuild-20210911231810453900000003] aws_iam_role_policy_attachment.AmazonEKSServicePolicy: Refreshing state... [id=devsecops-houston-codebuild-20210911231810424800000002] aws_iam_role_policy.devsecops-austin-codebuild: Refreshing state... [id=devsecops-houston-codebuild:terraform-20210911231810411800000001] aws_codebuild_project.devsecops-austin-codebuild-DEPLOY: Refreshing state... [id=arn:aws:codebuild:us-west-2:123456789012:project/devsecops-houston-codebuild-DEPLOY] aws_codebuild_project.devsecops-austin-codebuild-STATIC: Refreshing state... [id=arn:aws:codebuild:us-west-2:123456789012:project/devsecops-houston-codebuild-STATIC] aws_iam_role_policy.codepipeline_policy: Refreshing state... [id=houston-test-role:houston-codepipeline_policy] aws_codepipeline.codepipeline: Refreshing state... [id=houston-devsecops-pipeline] Note: Objects have changed outside of Terraform Terraform detected the following changes made outside of Terraform since the last \u0026quot;terraform apply\u0026quot;: # aws_iam_role.main has been changed ~ resource \u0026quot;aws_iam_role\u0026quot; \u0026quot;main\u0026quot; { id = \u0026quot;eks-devsecops\u0026quot; name = \u0026quot;eks-devsecops\u0026quot; + tags = {} # (10 unchanged attributes hidden) # (1 unchanged block hidden) } # aws_codepipeline.codepipeline has been changed ~ resource \u0026quot;aws_codepipeline\u0026quot; \u0026quot;codepipeline\u0026quot; { id = \u0026quot;houston-devsecops-pipeline\u0026quot; name = \u0026quot;houston-devsecops-pipeline\u0026quot; + tags = {} # (3 unchanged attributes hidden) ~ stage { name = \u0026quot;Source\u0026quot; ~ action { + input_artifacts = [] name = \u0026quot;Source\u0026quot; # (7 unchanged attributes hidden) } } ~ stage { name = \u0026quot;Build\u0026quot; ~ action { name = \u0026quot;Build\u0026quot; + output_artifacts = [] # (7 unchanged attributes hidden) } } ~ stage { name = \u0026quot;Deploy\u0026quot; ~ action { name = \u0026quot;Deploy\u0026quot; + output_artifacts = [] # (7 unchanged attributes hidden) } } # (2 unchanged blocks hidden) } # aws_s3_bucket.codepipeline_bucket has been changed ~ resource \u0026quot;aws_s3_bucket\u0026quot; \u0026quot;codepipeline_bucket\u0026quot; { id = \u0026quot;houston-devsecops-code\u0026quot; + tags = {} # (10 unchanged attributes hidden) # (1 unchanged block hidden) } # aws_ssm_parameter.account_id has been changed ~ resource \u0026quot;aws_ssm_parameter\u0026quot; \u0026quot;account_id\u0026quot; { id = \u0026quot;ACCOUNT_ID\u0026quot; name = \u0026quot;ACCOUNT_ID\u0026quot; + tags = {} # (8 unchanged attributes hidden) } # aws_codecommit_repository.devsecops has been changed ~ resource \u0026quot;aws_codecommit_repository\u0026quot; \u0026quot;devsecops\u0026quot; { id = \u0026quot;houston-devsecops-repo\u0026quot; + tags = {} # (8 unchanged attributes hidden) } # aws_cloudwatch_log_group.codebuild has been changed ~ resource \u0026quot;aws_cloudwatch_log_group\u0026quot; \u0026quot;codebuild\u0026quot; { id = \u0026quot;devsecops-houston-codebuild\u0026quot; name = \u0026quot;devsecops-houston-codebuild\u0026quot; + tags = {} # (3 unchanged attributes hidden) } # aws_iam_role.codepipeline_role has been changed ~ resource \u0026quot;aws_iam_role\u0026quot; \u0026quot;codepipeline_role\u0026quot; { id = \u0026quot;houston-test-role\u0026quot; name = \u0026quot;houston-test-role\u0026quot; + tags = {} # (9 unchanged attributes hidden) - inline_policy {} + inline_policy { + name = \u0026quot;houston-codepipeline_policy\u0026quot; + policy = jsonencode( { + Statement = [ + { + Action = [ + \u0026quot;s3:GetObject\u0026quot;, + \u0026quot;s3:GetObjectVersion\u0026quot;, + \u0026quot;s3:GetBucketVersioning\u0026quot;, + \u0026quot;s3:PutObject\u0026quot;, ] + Effect = \u0026quot;Allow\u0026quot; + Resource = [ + \u0026quot;arn:aws:s3:::houston-devsecops-code\u0026quot;, + \u0026quot;arn:aws:s3:::houston-devsecops-code/*\u0026quot;, ] }, + { + Action = [ + \u0026quot;codebuild:BatchGetBuilds\u0026quot;, + \u0026quot;codebuild:StartBuild\u0026quot;, ] + Effect = \u0026quot;Allow\u0026quot; + Resource = \u0026quot;*\u0026quot; }, ] + Version = \u0026quot;2012-10-17\u0026quot; } ) } } # aws_s3_bucket.codebuild_s3 has been changed ~ resource \u0026quot;aws_s3_bucket\u0026quot; \u0026quot;codebuild_s3\u0026quot; { id = \u0026quot;devsecops-houston-codebuild\u0026quot; + tags = {} # (10 unchanged attributes hidden) # (1 unchanged block hidden) } # aws_iam_role.devsecops-austin-codebuild has been changed ~ resource \u0026quot;aws_iam_role\u0026quot; \u0026quot;devsecops-austin-codebuild\u0026quot; { id = \u0026quot;devsecops-houston-codebuild\u0026quot; ~ managed_policy_arns = [ + \u0026quot;arn:aws:iam::aws:policy/AmazonEKSClusterPolicy\u0026quot;, + \u0026quot;arn:aws:iam::aws:policy/AmazonEKSServicePolicy\u0026quot;, ] name = \u0026quot;devsecops-houston-codebuild\u0026quot; + tags = {} # (8 unchanged attributes hidden) - inline_policy {} + inline_policy { + name = \u0026quot;terraform-20210911231810411800000001\u0026quot; + policy = jsonencode( { + Statement = [ + { + Action = [ + \u0026quot;logs:CreateLogGroup\u0026quot;, + \u0026quot;logs:CreateLogStream\u0026quot;, + \u0026quot;logs:PutLogEvents\u0026quot;, + \u0026quot;sts:AssumeRole\u0026quot;, + \u0026quot;eks:*\u0026quot;, ] + Effect = \u0026quot;Allow\u0026quot; + Resource = [ + \u0026quot;*\u0026quot;, ] }, + { + Action = [ + \u0026quot;ec2:CreateNetworkInterface\u0026quot;, + \u0026quot;ec2:DescribeDhcpOptions\u0026quot;, + \u0026quot;ec2:DescribeNetworkInterfaces\u0026quot;, + \u0026quot;ec2:DeleteNetworkInterface\u0026quot;, + \u0026quot;ec2:DescribeSubnets\u0026quot;, + \u0026quot;ec2:DescribeSecurityGroups\u0026quot;, + \u0026quot;ec2:DescribeVpcs\u0026quot;, + \u0026quot;ecr:*\u0026quot;, + \u0026quot;ssm:*\u0026quot;, ] + Effect = \u0026quot;Allow\u0026quot; + Resource = \u0026quot;*\u0026quot; }, + { + Action = [ + \u0026quot;ec2:CreateNetworkInterfacePermission\u0026quot;, ] + Effect = \u0026quot;Allow\u0026quot; + Resource = [ + \u0026quot;arn:aws:ec2:us-west-2:*:network-interface/*\u0026quot;, ] }, + { + Action = [ + \u0026quot;s3:*\u0026quot;, ] + Effect = \u0026quot;Allow\u0026quot; + Resource = [ + \u0026quot;arn:aws:s3:::devsecops-houston-codebuild\u0026quot;, + \u0026quot;arn:aws:s3:::devsecops-houston-codebuild/*\u0026quot;, + \u0026quot;arn:aws:s3:::houston-devsecops-code\u0026quot;, + \u0026quot;arn:aws:s3:::houston-devsecops-code/*\u0026quot;, ] }, ] + Version = \u0026quot;2012-10-17\u0026quot; } ) } } # aws_iam_policy.allow-eks-asg has been changed ~ resource \u0026quot;aws_iam_policy\u0026quot; \u0026quot;allow-eks-asg\u0026quot; { id = \u0026quot;arn:aws:iam::123456789012:policy/eks-devsecops-allow-eks-asg\u0026quot; name = \u0026quot;eks-devsecops-allow-eks-asg\u0026quot; + tags = {} # (5 unchanged attributes hidden) } Unless you have made equivalent changes to your configuration, or ignored the relevant attributes using ignore_changes, the following plan may include actions to undo or respond to these changes. â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ No changes. Your infrastructure matches the configuration. Your configuration already matches the changes detected above. If you'd like to update the Terraform state to match, create and apply a refresh-only plan: terraform apply -refresh-only    Terraform Apply ~/environment/devsecopspipeline (master) $ make tf_apply cd terraform/ \u0026amp;\u0026amp; \\ terraform apply -auto-approve Terraform used the selected providers to generate the following execution plan. Resource actions are indicated with the following symbols: + create    Expand here is what it looks like in its entirety   Terraform will perform the following actions: # aws_cloudwatch_log_group.codebuild will be created + resource \u0026#34;aws_cloudwatch_log_group\u0026#34; \u0026#34;codebuild\u0026#34; { + arn = (known after apply) + id = (known after apply) + name = \u0026#34;devsecops-houston-codebuild\u0026#34; + retention_in_days = 0 + tags_all = (known after apply) } # aws_cloudwatch_log_stream.codebuild will be created + resource \u0026#34;aws_cloudwatch_log_stream\u0026#34; \u0026#34;codebuild\u0026#34; { + arn = (known after apply) + id = (known after apply) + log_group_name = \u0026#34;devsecops-houston-codebuild\u0026#34; + name = \u0026#34;devsecops-houston-codebuild\u0026#34; } # aws_codebuild_project.devsecops-austin-codebuild-BUILD will be created + resource \u0026#34;aws_codebuild_project\u0026#34; \u0026#34;devsecops-austin-codebuild-BUILD\u0026#34; { + arn = (known after apply) + badge_enabled = false + badge_url = (known after apply) + build_timeout = 5 + description = \u0026#34;devsecops-houston-codebuild-BUILD\u0026#34; + encryption_key = (known after apply) + id = (known after apply) + name = \u0026#34;devsecops-houston-codebuild-BUILD\u0026#34; + queued_timeout = 480 + service_role = (known after apply) + source_version = \u0026#34;master\u0026#34; + tags = { + \u0026#34;Environment\u0026#34; = \u0026#34;devsecops-houston\u0026#34; } + tags_all = { + \u0026#34;Environment\u0026#34; = \u0026#34;devsecops-houston\u0026#34; } + artifacts { + encryption_disabled = false + override_artifact_name = false + type = \u0026#34;CODEPIPELINE\u0026#34; } + environment { + compute_type = \u0026#34;BUILD_GENERAL1_LARGE\u0026#34; + image = \u0026#34;aws/codebuild/standard:2.0\u0026#34; + image_pull_credentials_type = \u0026#34;CODEBUILD\u0026#34; + privileged_mode = true + type = \u0026#34;LINUX_CONTAINER\u0026#34; + environment_variable { + name = \u0026#34;ACCOUNT_ID\u0026#34; + type = \u0026#34;PARAMETER_STORE\u0026#34; + value = \u0026#34;ACCOUNT_ID\u0026#34; } + environment_variable { + name = \u0026#34;EKS_KUBECTL_ROLE_NAME\u0026#34; + type = \u0026#34;PLAINTEXT\u0026#34; + value = \u0026#34;devsecops-houston-codebuild\u0026#34; } } + logs_config { + cloudwatch_logs { + group_name = \u0026#34;devsecops-houston-codebuild\u0026#34; + status = \u0026#34;ENABLED\u0026#34; + stream_name = \u0026#34;devsecops-houston-codebuild\u0026#34; } + s3_logs { + encryption_disabled = false + location = (known after apply) + status = \u0026#34;ENABLED\u0026#34; } } + source { + buildspec = \u0026lt;\u0026lt;-EOT --- version: 0.2 phases: install: commands: - apt-get update \u0026amp;\u0026amp; apt-get -y install curl jq python3-pip python3-dev \u0026amp;\u0026amp; pip3 install --upgrade awscli - curl -sS -o aws-iam-authenticator https://amazon-eks.s3-us-west-2.amazonaws.com/1.10.3/2018-07-26/bin/linux/amd64/aws-iam-authenticator - curl -sS -o kubectl https://amazon-eks.s3-us-west-2.amazonaws.com/1.14.6/2019-08-22/bin/linux/amd64/kubectl - chmod +x ./kubectl ./aws-iam-authenticator - export PATH=$PWD/:$PATH pre_build: commands: - TAG=\u0026#34;$REPOSITORY_NAME.$REPOSITORY_BRANCH.$ENVIRONMENT_NAME.$(date +%Y-%m-%d.%H.%M.%S).$(echo $CODEBUILD_RESOLVED_SOURCE_VERSION | head -c 8)\u0026#34; - sed -i \u0026#39;s@CONTAINER_IMAGE@\u0026#39;\u0026#34;$REPOSITORY_URI:$TAG\u0026#34;\u0026#39;@\u0026#39; app.yml - CREDENTIALS=$(aws sts assume-role --role-arn arn:aws:iam::$ACCOUNT_ID:role/$EKS_KUBECTL_ROLE_NAME --role-session-name codebuild-kubectl --duration-seconds 900) - export AWS_ACCESS_KEY_ID=\u0026#34;$(echo ${CREDENTIALS} | jq -r \u0026#39;.Credentials.AccessKeyId\u0026#39;)\u0026#34; - export AWS_SECRET_ACCESS_KEY=\u0026#34;$(echo ${CREDENTIALS} | jq -r \u0026#39;.Credentials.SecretAccessKey\u0026#39;)\u0026#34; - export AWS_SESSION_TOKEN=\u0026#34;$(echo ${CREDENTIALS} | jq -r \u0026#39;.Credentials.SessionToken\u0026#39;)\u0026#34; - export AWS_EXPIRATION=$(echo ${CREDENTIALS} | jq -r \u0026#39;.Credentials.Expiration\u0026#39;) - $(aws ecr get-login --no-include-email) build: commands: - make docker_build post_build: commands: - CREDENTIALS=$(aws sts assume-role --role-arn arn:aws:iam::$ACCOUNT_ID:role/$EKS_KUBECTL_ROLE_NAME --role-session-name codebuild-kubectl --duration-seconds 900) - export AWS_ACCESS_KEY_ID=\u0026#34;$(echo ${CREDENTIALS} | jq -r \u0026#39;.Credentials.AccessKeyId\u0026#39;)\u0026#34; - export AWS_SECRET_ACCESS_KEY=\u0026#34;$(echo ${CREDENTIALS} | jq -r \u0026#39;.Credentials.SecretAccessKey\u0026#39;)\u0026#34; - export AWS_SESSION_TOKEN=\u0026#34;$(echo ${CREDENTIALS} | jq -r \u0026#39;.Credentials.SessionToken\u0026#39;)\u0026#34; - export AWS_EXPIRATION=$(echo ${CREDENTIALS} | jq -r \u0026#39;.Credentials.Expiration\u0026#39;) - make docker_push artifacts: files: build.json EOT + type = \u0026#34;CODEPIPELINE\u0026#34; } } # aws_codebuild_project.devsecops-austin-codebuild-DEPLOY will be created + resource \u0026#34;aws_codebuild_project\u0026#34; \u0026#34;devsecops-austin-codebuild-DEPLOY\u0026#34; { + arn = (known after apply) + badge_enabled = false + badge_url = (known after apply) + build_timeout = 5 + description = \u0026#34;devsecops-houston-codebuild-DEPLOY\u0026#34; + encryption_key = (known after apply) + id = (known after apply) + name = \u0026#34;devsecops-houston-codebuild-DEPLOY\u0026#34; + queued_timeout = 480 + service_role = (known after apply) + source_version = \u0026#34;master\u0026#34; + tags = { + \u0026#34;Environment\u0026#34; = \u0026#34;devsecops-houston\u0026#34; } + tags_all = { + \u0026#34;Environment\u0026#34; = \u0026#34;devsecops-houston\u0026#34; } + artifacts { + encryption_disabled = false + override_artifact_name = false + type = \u0026#34;CODEPIPELINE\u0026#34; } + environment { + compute_type = \u0026#34;BUILD_GENERAL1_LARGE\u0026#34; + image = \u0026#34;aws/codebuild/standard:2.0\u0026#34; + image_pull_credentials_type = \u0026#34;CODEBUILD\u0026#34; + privileged_mode = true + type = \u0026#34;LINUX_CONTAINER\u0026#34; + environment_variable { + name = \u0026#34;ACCOUNT_ID\u0026#34; + type = \u0026#34;PARAMETER_STORE\u0026#34; + value = \u0026#34;ACCOUNT_ID\u0026#34; } + environment_variable { + name = \u0026#34;EKS_KUBECTL_ROLE_NAME\u0026#34; + type = \u0026#34;PLAINTEXT\u0026#34; + value = \u0026#34;devsecops-houston-codebuild\u0026#34; } } + logs_config { + cloudwatch_logs { + group_name = \u0026#34;devsecops-houston-codebuild\u0026#34; + status = \u0026#34;ENABLED\u0026#34; + stream_name = \u0026#34;devsecops-houston-codebuild\u0026#34; } + s3_logs { + encryption_disabled = false + location = (known after apply) + status = \u0026#34;ENABLED\u0026#34; } } + source { + buildspec = \u0026lt;\u0026lt;-EOT --- version: 0.2 phases: install: commands: - curl -sS -o aws-iam-authenticator https://amazon-eks.s3-us-west-2.amazonaws.com/1.10.3/2018-07-26/bin/linux/amd64/aws-iam-authenticator - curl -sS -o kubectl https://amazon-eks.s3-us-west-2.amazonaws.com/1.14.6/2019-08-22/bin/linux/amd64/kubectl - chmod +x ./kubectl ./aws-iam-authenticator - export PATH=$PWD/:$PATH - apt-get update \u0026amp;\u0026amp; apt-get -y install jq python3-pip python3-dev \u0026amp;\u0026amp; pip3 install --upgrade awscli pre_build: commands: - TAG=\u0026#34;$REPOSITORY_NAME.$REPOSITORY_BRANCH.$ENVIRONMENT_NAME.$(date +%Y-%m-%d.%H.%M.%S).$(echo $CODEBUILD_RESOLVED_SOURCE_VERSION | head -c 8)\u0026#34; - sed -i \u0026#39;s@CONTAINER_IMAGE@\u0026#39;\u0026#34;$REPOSITORY_URI:$TAG\u0026#34;\u0026#39;@\u0026#39; app.yml - cat app.yml - $(aws ecr get-login --no-include-email) - export KUBECONFIG=$HOME/.kube/config build: commands: - CREDENTIALS=$(aws sts assume-role --role-arn arn:aws:iam::$ACCOUNT_ID:role/$EKS_KUBECTL_ROLE_NAME --role-session-name codebuild-kubectl --duration-seconds 900) - export AWS_ACCESS_KEY_ID=\u0026#34;$(echo ${CREDENTIALS} | jq -r \u0026#39;.Credentials.AccessKeyId\u0026#39;)\u0026#34; - export AWS_SECRET_ACCESS_KEY=\u0026#34;$(echo ${CREDENTIALS} | jq -r \u0026#39;.Credentials.SecretAccessKey\u0026#39;)\u0026#34; - export AWS_SESSION_TOKEN=\u0026#34;$(echo ${CREDENTIALS} | jq -r \u0026#39;.Credentials.SessionToken\u0026#39;)\u0026#34; - export AWS_EXPIRATION=\u0026#34;$(echo ${CREDENTIALS} | jq -r \u0026#39;.Credentials.Expiration\u0026#39;)\u0026#34; - echo \u0026#34;EKS Cluster Name ${EKS_CLUSTER_NAME}\u0026#34; - make kube_update - kubectl apply -f app.yml --kubeconfig /root/.kube/config post_build: commands: - kubectl get pods -l app=devsecopspipeline artifacts: files: build.json EOT + type = \u0026#34;CODEPIPELINE\u0026#34; } } # aws_codebuild_project.devsecops-austin-codebuild-STATIC will be created + resource \u0026#34;aws_codebuild_project\u0026#34; \u0026#34;devsecops-austin-codebuild-STATIC\u0026#34; { + arn = (known after apply) + badge_enabled = false + badge_url = (known after apply) + build_timeout = 5 + description = \u0026#34;devsecops-houston-codebuild-STATIC\u0026#34; + encryption_key = (known after apply) + id = (known after apply) + name = \u0026#34;devsecops-houston-codebuild-STATIC\u0026#34; + queued_timeout = 480 + service_role = (known after apply) + source_version = \u0026#34;master\u0026#34; + tags = { + \u0026#34;Environment\u0026#34; = \u0026#34;devsecops-houston\u0026#34; } + tags_all = { + \u0026#34;Environment\u0026#34; = \u0026#34;devsecops-houston\u0026#34; } + artifacts { + artifact_identifier = \u0026#34;static-code-report\u0026#34; + encryption_disabled = false + override_artifact_name = false + type = \u0026#34;CODEPIPELINE\u0026#34; } + environment { + compute_type = \u0026#34;BUILD_GENERAL1_LARGE\u0026#34; + image = \u0026#34;aws/codebuild/standard:2.0\u0026#34; + image_pull_credentials_type = \u0026#34;CODEBUILD\u0026#34; + privileged_mode = true + type = \u0026#34;LINUX_CONTAINER\u0026#34; + environment_variable { + name = \u0026#34;ACCOUNT_ID\u0026#34; + type = \u0026#34;PARAMETER_STORE\u0026#34; + value = \u0026#34;ACCOUNT_ID\u0026#34; } + environment_variable { + name = \u0026#34;EKS_KUBECTL_ROLE_NAME\u0026#34; + type = \u0026#34;PLAINTEXT\u0026#34; + value = \u0026#34;devsecops-houston-codebuild\u0026#34; } } + logs_config { + cloudwatch_logs { + group_name = \u0026#34;devsecops-houston-codebuild\u0026#34; + status = \u0026#34;ENABLED\u0026#34; + stream_name = \u0026#34;devsecops-houston-codebuild\u0026#34; } + s3_logs { + encryption_disabled = false + location = (known after apply) + status = \u0026#34;ENABLED\u0026#34; } } + source { + buildspec = \u0026lt;\u0026lt;-EOT --- version: 0.2 phases: install: commands: - make go_version - apt-get update \u0026amp;\u0026amp; apt-get -y install curl jq - curl -o go1.13.5.linux-amd64.tar.gz https://dl.google.com/go/go1.13.5.linux-amd64.tar.gz - tar -C /usr/local -xzf go1.13.5.linux-amd64.tar.gz - export PATH=${PATH}:/usr/local/go/bin - export GOROOT=/usr/local/go - go version build: commands: - export PATH=${PATH}:/usr/local/go/bin - export GOROOT=/usr/local/go - make go_report post_build: commands: - mv src-*.html devsecopspipeline.html artifacts: files: - devsecopspipeline.html name: static-code-report EOT + type = \u0026#34;CODEPIPELINE\u0026#34; } } # aws_codecommit_repository.devsecops will be created + resource \u0026#34;aws_codecommit_repository\u0026#34; \u0026#34;devsecops\u0026#34; { + arn = (known after apply) + clone_url_http = (known after apply) + clone_url_ssh = (known after apply) + default_branch = \u0026#34;main\u0026#34; + description = \u0026#34;This is the Sample App Repository for AWS DevSecOps Workshop\u0026#34; + id = (known after apply) + repository_id = (known after apply) + repository_name = \u0026#34;houston-devsecops-repo\u0026#34; + tags_all = (known after apply) } # aws_codepipeline.codepipeline will be created + resource \u0026#34;aws_codepipeline\u0026#34; \u0026#34;codepipeline\u0026#34; { + arn = (known after apply) + id = (known after apply) + name = \u0026#34;houston-devsecops-pipeline\u0026#34; + role_arn = (known after apply) + tags_all = (known after apply) + artifact_store { + location = \u0026#34;houston-devsecops-code\u0026#34; + region = (known after apply) + type = \u0026#34;S3\u0026#34; } + stage { + name = \u0026#34;Source\u0026#34; + action { + category = \u0026#34;Source\u0026#34; + configuration = { + \u0026#34;BranchName\u0026#34; = \u0026#34;main\u0026#34; + \u0026#34;RepositoryName\u0026#34; = \u0026#34;houston-devsecops-repo\u0026#34; } + name = \u0026#34;Source\u0026#34; + output_artifacts = [ + \u0026#34;source_output\u0026#34;, ] + owner = \u0026#34;AWS\u0026#34; + provider = \u0026#34;CodeCommit\u0026#34; + region = (known after apply) + run_order = (known after apply) + version = \u0026#34;1\u0026#34; } } + stage { + name = \u0026#34;Report\u0026#34; + action { + category = \u0026#34;Test\u0026#34; + configuration = { + \u0026#34;ProjectName\u0026#34; = \u0026#34;devsecops-houston-codebuild-STATIC\u0026#34; } + input_artifacts = [ + \u0026#34;source_output\u0026#34;, ] + name = \u0026#34;Report\u0026#34; + output_artifacts = [ + \u0026#34;static_output\u0026#34;, ] + owner = \u0026#34;AWS\u0026#34; + provider = \u0026#34;CodeBuild\u0026#34; + region = (known after apply) + run_order = (known after apply) + version = \u0026#34;1\u0026#34; } } + stage { + name = \u0026#34;Build\u0026#34; + action { + category = \u0026#34;Build\u0026#34; + configuration = { + \u0026#34;ProjectName\u0026#34; = \u0026#34;devsecops-houston-codebuild-BUILD\u0026#34; } + input_artifacts = [ + \u0026#34;source_output\u0026#34;, ] + name = \u0026#34;Build\u0026#34; + owner = \u0026#34;AWS\u0026#34; + provider = \u0026#34;CodeBuild\u0026#34; + region = (known after apply) + run_order = (known after apply) + version = \u0026#34;1\u0026#34; } } + stage { + name = \u0026#34;Deploy\u0026#34; + action { + category = \u0026#34;Build\u0026#34; + configuration = { + \u0026#34;ProjectName\u0026#34; = \u0026#34;devsecops-houston-codebuild-DEPLOY\u0026#34; } + input_artifacts = [ + \u0026#34;source_output\u0026#34;, ] + name = \u0026#34;Deploy\u0026#34; + owner = \u0026#34;AWS\u0026#34; + provider = \u0026#34;CodeBuild\u0026#34; + region = (known after apply) + run_order = (known after apply) + version = \u0026#34;1\u0026#34; } } } # aws_ecr_repository.golang_example will be created + resource \u0026#34;aws_ecr_repository\u0026#34; \u0026#34;golang_example\u0026#34; { + arn = (known after apply) + id = (known after apply) + image_tag_mutability = \u0026#34;IMMUTABLE\u0026#34; + name = \u0026#34;golang_example-houston\u0026#34; + registry_id = (known after apply) + repository_url = (known after apply) + tags = { + \u0026#34;env\u0026#34; = \u0026#34;devsecops\u0026#34; } + tags_all = { + \u0026#34;env\u0026#34; = \u0026#34;devsecops\u0026#34; } + image_scanning_configuration { + scan_on_push = true } } # aws_iam_policy.allow-eks-asg will be created + resource \u0026#34;aws_iam_policy\u0026#34; \u0026#34;allow-eks-asg\u0026#34; { + arn = (known after apply) + id = (known after apply) + name = \u0026#34;eks-devsecops-allow-eks-asg\u0026#34; + path = \u0026#34;/\u0026#34; + policy = jsonencode( { + Statement = [ + { + Action = [ + \u0026#34;autoscaling:DescribeAutoScalingGroups\u0026#34;, + \u0026#34;autoscaling:DescribeAutoScalingInstances\u0026#34;, + \u0026#34;autoscaling:DescribeLaunchConfigurations\u0026#34;, + \u0026#34;autoscaling:SetDesiredCapacity\u0026#34;, + \u0026#34;autoscaling:TerminateInstanceInAutoScalingGroup\u0026#34;, + \u0026#34;autoscaling:DescribeTags\u0026#34;, + \u0026#34;ec2:DescribeLaunchTemplateVersions\u0026#34;, + \u0026#34;eks:*\u0026#34;, ] + Effect = \u0026#34;Allow\u0026#34; + Resource = \u0026#34;*\u0026#34; }, ] + Version = \u0026#34;2012-10-17\u0026#34; } ) + policy_id = (known after apply) + tags_all = (known after apply) } # aws_iam_role.codepipeline_role will be created + resource \u0026#34;aws_iam_role\u0026#34; \u0026#34;codepipeline_role\u0026#34; { + arn = (known after apply) + assume_role_policy = jsonencode( { + Statement = [ + { + Action = \u0026#34;sts:AssumeRole\u0026#34; + Effect = \u0026#34;Allow\u0026#34; + Principal = { + Service = \u0026#34;codepipeline.amazonaws.com\u0026#34; } }, ] + Version = \u0026#34;2012-10-17\u0026#34; } ) + create_date = (known after apply) + force_detach_policies = false + id = (known after apply) + managed_policy_arns = (known after apply) + max_session_duration = 3600 + name = \u0026#34;houston-test-role\u0026#34; + path = \u0026#34;/\u0026#34; + tags_all = (known after apply) + unique_id = (known after apply) + inline_policy { + name = (known after apply) + policy = (known after apply) } } # aws_iam_role.devsecops-austin-codebuild will be created + resource \u0026#34;aws_iam_role\u0026#34; \u0026#34;devsecops-austin-codebuild\u0026#34; { + arn = (known after apply) + assume_role_policy = jsonencode( { + Statement = [ + { + Action = \u0026#34;sts:AssumeRole\u0026#34; + Effect = \u0026#34;Allow\u0026#34; + Principal = { + Service = \u0026#34;codebuild.amazonaws.com\u0026#34; } }, ] + Version = \u0026#34;2012-10-17\u0026#34; } ) + create_date = (known after apply) + force_detach_policies = false + id = (known after apply) + managed_policy_arns = (known after apply) + max_session_duration = 3600 + name = \u0026#34;devsecops-houston-codebuild\u0026#34; + path = \u0026#34;/\u0026#34; + tags_all = (known after apply) + unique_id = (known after apply) + inline_policy { + name = (known after apply) + policy = (known after apply) } } # aws_iam_role.main will be created + resource \u0026#34;aws_iam_role\u0026#34; \u0026#34;main\u0026#34; { + arn = (known after apply) + assume_role_policy = jsonencode( { + Statement = [ + { + Action = \u0026#34;sts:AssumeRole\u0026#34; + Effect = \u0026#34;Allow\u0026#34; + Principal = { + Service = \u0026#34;eks.amazonaws.com\u0026#34; } }, ] + Version = \u0026#34;2012-10-17\u0026#34; } ) + create_date = (known after apply) + description = \u0026#34;Role for eks service\u0026#34; + force_detach_policies = false + id = (known after apply) + managed_policy_arns = (known after apply) + max_session_duration = 3600 + name = \u0026#34;eks-devsecops\u0026#34; + path = \u0026#34;/\u0026#34; + tags_all = (known after apply) + unique_id = (known after apply) + inline_policy { + name = (known after apply) + policy = (known after apply) } } # aws_iam_role_policy.codepipeline_policy will be created + resource \u0026#34;aws_iam_role_policy\u0026#34; \u0026#34;codepipeline_policy\u0026#34; { + id = (known after apply) + name = \u0026#34;houston-codepipeline_policy\u0026#34; + policy = (known after apply) + role = (known after apply) } # aws_iam_role_policy.devsecops-austin-codebuild will be created + resource \u0026#34;aws_iam_role_policy\u0026#34; \u0026#34;devsecops-austin-codebuild\u0026#34; { + id = (known after apply) + name = (known after apply) + policy = (known after apply) + role = \u0026#34;devsecops-houston-codebuild\u0026#34; } # aws_iam_role_policy_attachment.AmazonEKSClusterPolicy will be created + resource \u0026#34;aws_iam_role_policy_attachment\u0026#34; \u0026#34;AmazonEKSClusterPolicy\u0026#34; { + id = (known after apply) + policy_arn = \u0026#34;arn:aws:iam::aws:policy/AmazonEKSClusterPolicy\u0026#34; + role = \u0026#34;devsecops-houston-codebuild\u0026#34; } # aws_iam_role_policy_attachment.AmazonEKSServicePolicy will be created + resource \u0026#34;aws_iam_role_policy_attachment\u0026#34; \u0026#34;AmazonEKSServicePolicy\u0026#34; { + id = (known after apply) + policy_arn = \u0026#34;arn:aws:iam::aws:policy/AmazonEKSServicePolicy\u0026#34; + role = \u0026#34;devsecops-houston-codebuild\u0026#34; } # aws_s3_bucket.codebuild_s3 will be created + resource \u0026#34;aws_s3_bucket\u0026#34; \u0026#34;codebuild_s3\u0026#34; { + acceleration_status = (known after apply) + acl = \u0026#34;private\u0026#34; + arn = (known after apply) + bucket = \u0026#34;devsecops-houston-codebuild\u0026#34; + bucket_domain_name = (known after apply) + bucket_regional_domain_name = (known after apply) + force_destroy = false + hosted_zone_id = (known after apply) + id = (known after apply) + region = (known after apply) + request_payer = (known after apply) + tags_all = (known after apply) + website_domain = (known after apply) + website_endpoint = (known after apply) + versioning { + enabled = (known after apply) + mfa_delete = (known after apply) } } # aws_s3_bucket.codepipeline_bucket will be created + resource \u0026#34;aws_s3_bucket\u0026#34; \u0026#34;codepipeline_bucket\u0026#34; { + acceleration_status = (known after apply) + acl = \u0026#34;private\u0026#34; + arn = (known after apply) + bucket = \u0026#34;houston-devsecops-code\u0026#34; + bucket_domain_name = (known after apply) + bucket_regional_domain_name = (known after apply) + force_destroy = false + hosted_zone_id = (known after apply) + id = (known after apply) + region = (known after apply) + request_payer = (known after apply) + tags_all = (known after apply) + website_domain = (known after apply) + website_endpoint = (known after apply) + versioning { + enabled = (known after apply) + mfa_delete = (known after apply) } } # aws_ssm_parameter.account_id will be created + resource \u0026#34;aws_ssm_parameter\u0026#34; \u0026#34;account_id\u0026#34; { + arn = (known after apply) + data_type = (known after apply) + id = (known after apply) + key_id = (known after apply) + name = \u0026#34;ACCOUNT_ID\u0026#34; + overwrite = true + tags_all = (known after apply) + tier = \u0026#34;Standard\u0026#34; + type = \u0026#34;String\u0026#34; + value = (sensitive value) + version = (known after apply) } Plan: 19 to add, 0 to change, 0 to destroy. aws_cloudwatch_log_group.codebuild: Creating... aws_iam_role.codepipeline_role: Creating... aws_ssm_parameter.account_id: Creating... aws_iam_role.devsecops-austin-codebuild: Creating... aws_ecr_repository.golang_example: Creating... aws_iam_role.main: Creating... aws_s3_bucket.codepipeline_bucket: Creating... aws_codecommit_repository.devsecops: Creating... aws_iam_policy.allow-eks-asg: Creating... aws_s3_bucket.codebuild_s3: Creating... aws_cloudwatch_log_group.codebuild: Creation complete after 0s [id=devsecops-houston-codebuild] aws_cloudwatch_log_stream.codebuild: Creating... aws_ecr_repository.golang_example: Creation complete after 0s [id=golang_example-houston] aws_cloudwatch_log_stream.codebuild: Creation complete after 0s [id=devsecops-houston-codebuild] aws_ssm_parameter.account_id: Creation complete after 0s [id=ACCOUNT_ID] aws_codecommit_repository.devsecops: Creation complete after 0s [id=houston-devsecops-repo] aws_iam_policy.allow-eks-asg: Creation complete after 1s [id=arn:aws:iam::123456789012:policy/eks-devsecops-allow-eks-asg] aws_iam_role.devsecops-austin-codebuild: Creation complete after 1s [id=devsecops-houston-codebuild] aws_iam_role_policy_attachment.AmazonEKSServicePolicy: Creating... aws_iam_role_policy_attachment.AmazonEKSClusterPolicy: Creating... aws_iam_role.main: Creation complete after 1s [id=eks-devsecops] aws_s3_bucket.codebuild_s3: Creation complete after 1s [id=devsecops-houston-codebuild] aws_iam_role.codepipeline_role: Creation complete after 1s [id=houston-test-role] aws_codebuild_project.devsecops-austin-codebuild-DEPLOY: Creating... aws_codebuild_project.devsecops-austin-codebuild-BUILD: Creating... aws_codebuild_project.devsecops-austin-codebuild-STATIC: Creating... aws_s3_bucket.codepipeline_bucket: Creation complete after 1s [id=houston-devsecops-code] aws_iam_role_policy.devsecops-austin-codebuild: Creating... aws_iam_role_policy.codepipeline_policy: Creating... aws_codepipeline.codepipeline: Creating... aws_iam_role_policy_attachment.AmazonEKSServicePolicy: Creation complete after 1s [id=devsecops-houston-codebuild-20210911231810424800000002] aws_iam_role_policy_attachment.AmazonEKSClusterPolicy: Creation complete after 1s [id=devsecops-houston-codebuild-20210911231810453900000003] aws_iam_role_policy.codepipeline_policy: Creation complete after 1s [id=houston-test-role:houston-codepipeline_policy] aws_iam_role_policy.devsecops-austin-codebuild: Creation complete after 1s [id=devsecops-houston-codebuild:terraform-20210911231810411800000001] aws_codepipeline.codepipeline: Creation complete after 9s [id=houston-devsecops-pipeline] aws_codebuild_project.devsecops-austin-codebuild-DEPLOY: Still creating... [10s elapsed] aws_codebuild_project.devsecops-austin-codebuild-STATIC: Still creating... [10s elapsed] aws_codebuild_project.devsecops-austin-codebuild-BUILD: Still creating... [10s elapsed] aws_codebuild_project.devsecops-austin-codebuild-BUILD: Creation complete after 16s [id=arn:aws:codebuild:us-west-2:123456789012:project/devsecops-houston-codebuild-BUILD] aws_codebuild_project.devsecops-austin-codebuild-STATIC: Creation complete after 16s [id=arn:aws:codebuild:us-west-2:123456789012:project/devsecops-houston-codebuild-STATIC] aws_codebuild_project.devsecops-austin-codebuild-DEPLOY: Creation complete after 16s [id=arn:aws:codebuild:us-west-2:123456789012:project/devsecops-houston-codebuild-DEPLOY] Apply complete! Resources: 19 added, 0 changed, 0 destroyed.    You may need to start docker\n sudo service docker start Redirecting to /bin/systemctl start docker.service ``"
},
{
	"uri": "//localhost:1313/pipeline/exercise_2/",
	"title": "Container Pipeline Exercise Part 2",
	"tags": [],
	"description": "",
	"content": "AWS ECR Let\u0026rsquo;s push our docker image to ECR that was created from Terraform\n~/environment/devsecopspipeline (master) $ make docker_push docker login -u AWS -p redacted https://123456789012.dkr.ecr.us-west-2.amazonaws.com WARNING! Using --password via the CLI is insecure. Use --password-stdin. WARNING! Your password will be stored unencrypted in /home/ec2-user/.docker/config.json. Configure a credential helper to remove this warning. See https://docs.docker.com/engine/reference/commandline/login/#credentials-store Login Succeeded docker build -t 123456789012.dkr.ecr.us-west-2.amazonaws.com/golang_example-houston:0.1.20 . Sending build context to Docker daemon 198.3MB Step 1/10 : FROM golang:1.13-alpine AS builder ---\u0026gt; 5863598a981a Step 2/10 : RUN apk update \u0026amp;\u0026amp; apk add --no-cache git ---\u0026gt; Using cache ---\u0026gt; 38f3e2c68459 Step 3/10 : WORKDIR /go/src/app ---\u0026gt; Using cache ---\u0026gt; 7cfc77561295 Step 4/10 : COPY . . ---\u0026gt; a6c705d6dc6a Step 5/10 : RUN GIT_TERMINAL_PROMPT=1 go get -d -v ---\u0026gt; Running in 96f459e87b9c github.com/strongjz/go_example_app (download) github.com/gin-gonic/gin (download) github.com/gin-contrib/sse (download) github.com/go-playground/validator (download) github.com/go-playground/universal-translator (download) github.com/go-playground/locales (download) github.com/leodido/go-urn (download) get \u0026#34;golang.org/x/crypto/sha3\u0026#34;: found meta tag get.metaImport{Prefix:\u0026#34;golang.org/x/crypto\u0026#34;, VCS:\u0026#34;git\u0026#34;, RepoRoot:\u0026#34;https://go.googlesource.com/crypto\u0026#34;} at //golang.org/x/crypto/sha3?go-get=1 get \u0026#34;golang.org/x/crypto/sha3\u0026#34;: verifying non-authoritative meta tag golang.org/x/crypto (download) get \u0026#34;golang.org/x/text/language\u0026#34;: found meta tag get.metaImport{Prefix:\u0026#34;golang.org/x/text\u0026#34;, VCS:\u0026#34;git\u0026#34;, RepoRoot:\u0026#34;https://go.googlesource.com/text\u0026#34;} at //golang.org/x/text/language?go-get=1 get \u0026#34;golang.org/x/text/language\u0026#34;: verifying non-authoritative meta tag golang.org/x/text (download) github.com/ugorji/go (download) get \u0026#34;google.golang.org/protobuf/proto\u0026#34;: found meta tag get.metaImport{Prefix:\u0026#34;google.golang.org/protobuf\u0026#34;, VCS:\u0026#34;git\u0026#34;, RepoRoot:\u0026#34;https://go.googlesource.com/protobuf\u0026#34;} at //google.golang.org/protobuf/proto?go-get=1 get \u0026#34;google.golang.org/protobuf/proto\u0026#34;: verifying non-authoritative meta tag google.golang.org/protobuf (download) get \u0026#34;gopkg.in/yaml.v2\u0026#34;: found meta tag get.metaImport{Prefix:\u0026#34;gopkg.in/yaml.v2\u0026#34;, VCS:\u0026#34;git\u0026#34;, RepoRoot:\u0026#34;https://gopkg.in/yaml.v2\u0026#34;} at //gopkg.in/yaml.v2?go-get=1 gopkg.in/yaml.v2 (download) github.com/mattn/go-isatty (download) get \u0026#34;golang.org/x/sys/unix\u0026#34;: found meta tag get.metaImport{Prefix:\u0026#34;golang.org/x/sys\u0026#34;, VCS:\u0026#34;git\u0026#34;, RepoRoot:\u0026#34;https://go.googlesource.com/sys\u0026#34;} at //golang.org/x/sys/unix?go-get=1 get \u0026#34;golang.org/x/sys/unix\u0026#34;: verifying non-authoritative meta tag golang.org/x/sys (download) github.com/lib/pq (download) Removing intermediate container 96f459e87b9c ---\u0026gt; 953ff65afc5d Step 6/10 : RUN CGO_ENABLED=0 go build -o /go/bin/app ---\u0026gt; Running in 49da19462426 Removing intermediate container 49da19462426 ---\u0026gt; 7e9d11bad96b Step 7/10 : FROM golang:1.13-alpine ---\u0026gt; 5863598a981a Step 8/10 : COPY --from=builder /go/bin/app /go/bin/app ---\u0026gt; Using cache ---\u0026gt; abf4839e8c6b Step 9/10 : EXPOSE 8080 ---\u0026gt; Using cache ---\u0026gt; 62583b2da3ce Step 10/10 : CMD [\u0026#34;/go/bin/app\u0026#34;] ---\u0026gt; Using cache ---\u0026gt; 20b885db4549 Successfully built 20b885db4549 Successfully tagged 123456789012.dkr.ecr.us-west-2.amazonaws.com/golang_example-houston:0.1.20 docker push 123456789012.dkr.ecr.us-west-2.amazonaws.com/golang_example-houston:0.1.20 The push refers to repository [123456789012.dkr.ecr.us-west-2.amazonaws.com/golang_example-houston] 6223903865fc: Pushed 39c40114257b: Pushed 08161ff6b353: Pushed 1ba1431fe2ba: Pushed 0f7493e3a35b: Pushed 50644c29ef5a: Pushed 0.1.20: digest: sha256:256531371d0ca8da6d1aa13ad63579f887a1c5e8e2de25136bface4e3e13ccd4 size: 1576 ECR scans our images for vulnerabilities make ecr_scan_findings aws ecr describe-image-scan-findings --repository-name golang_example-houston --image-id imageTag=0.1.20 { \u0026#34;imageScanStatus\u0026#34;: { \u0026#34;status\u0026#34;: \u0026#34;COMPLETE\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;The scan was completed successfully.\u0026#34; }, \u0026#34;repositoryName\u0026#34;: \u0026#34;golang_example-houston\u0026#34;, \u0026#34;registryId\u0026#34;: \u0026#34;123456789012\u0026#34;, \u0026#34;imageId\u0026#34;: { \u0026#34;imageTag\u0026#34;: \u0026#34;0.1.20\u0026#34;, \u0026#34;imageDigest\u0026#34;: \u0026#34;sha256:256531371d0ca8da6d1aa13ad63579f887a1c5e8e2de25136bface4e3e13ccd4\u0026#34; }, \u0026#34;imageScanFindings\u0026#34;: { \u0026#34;imageScanCompletedAt\u0026#34;: 1631403103.0, \u0026#34;vulnerabilitySourceUpdatedAt\u0026#34;: 1631377466.0, \u0026#34;findings\u0026#34;: [ { \u0026#34;severity\u0026#34;: \u0026#34;MEDIUM\u0026#34;, \u0026#34;attributes\u0026#34;: [ { \u0026#34;value\u0026#34;: \u0026#34;2.10.5-r1\u0026#34;, \u0026#34;key\u0026#34;: \u0026#34;package_version\u0026#34; }, { \u0026#34;value\u0026#34;: \u0026#34;apk-tools\u0026#34;, \u0026#34;key\u0026#34;: \u0026#34;package_name\u0026#34; }, { \u0026#34;value\u0026#34;: \u0026#34;AV:N/AC:L/Au:N/C:N/I:N/A:P\u0026#34;, \u0026#34;key\u0026#34;: \u0026#34;CVSS2_VECTOR\u0026#34; }, { \u0026#34;value\u0026#34;: \u0026#34;5\u0026#34;, \u0026#34;key\u0026#34;: \u0026#34;CVSS2_SCORE\u0026#34; } ], \u0026#34;name\u0026#34;: \u0026#34;CVE-2021-30139\u0026#34;, \u0026#34;uri\u0026#34;: \u0026#34;https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-30139\u0026#34; }, { \u0026#34;severity\u0026#34;: \u0026#34;MEDIUM\u0026#34;, \u0026#34;attributes\u0026#34;: [ { \u0026#34;value\u0026#34;: \u0026#34;2.10.5-r1\u0026#34;, \u0026#34;key\u0026#34;: \u0026#34;package_version\u0026#34; }, { \u0026#34;value\u0026#34;: \u0026#34;apk-tools\u0026#34;, \u0026#34;key\u0026#34;: \u0026#34;package_name\u0026#34; }, { \u0026#34;value\u0026#34;: \u0026#34;AV:N/AC:L/Au:N/C:P/I:N/A:P\u0026#34;, \u0026#34;key\u0026#34;: \u0026#34;CVSS2_VECTOR\u0026#34; }, { \u0026#34;value\u0026#34;: \u0026#34;6.4\u0026#34;, \u0026#34;key\u0026#34;: \u0026#34;CVSS2_SCORE\u0026#34; } ], \u0026#34;name\u0026#34;: \u0026#34;CVE-2021-36159\u0026#34;, \u0026#34;uri\u0026#34;: \u0026#34;https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-36159\u0026#34; }, { \u0026#34;severity\u0026#34;: \u0026#34;MEDIUM\u0026#34;, \u0026#34;attributes\u0026#34;: [ { \u0026#34;value\u0026#34;: \u0026#34;1.31.1-r16\u0026#34;, \u0026#34;key\u0026#34;: \u0026#34;package_version\u0026#34; }, { \u0026#34;value\u0026#34;: \u0026#34;busybox\u0026#34;, \u0026#34;key\u0026#34;: \u0026#34;package_name\u0026#34; }, { \u0026#34;value\u0026#34;: \u0026#34;AV:N/AC:L/Au:N/C:N/I:N/A:P\u0026#34;, \u0026#34;key\u0026#34;: \u0026#34;CVSS2_VECTOR\u0026#34; }, { \u0026#34;value\u0026#34;: \u0026#34;5\u0026#34;, \u0026#34;key\u0026#34;: \u0026#34;CVSS2_SCORE\u0026#34; } ], \u0026#34;name\u0026#34;: \u0026#34;CVE-2021-28831\u0026#34;, \u0026#34;uri\u0026#34;: \u0026#34;https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-28831\u0026#34; }, { \u0026#34;severity\u0026#34;: \u0026#34;LOW\u0026#34;, \u0026#34;attributes\u0026#34;: [ { \u0026#34;value\u0026#34;: \u0026#34;1.1.24-r9\u0026#34;, \u0026#34;key\u0026#34;: \u0026#34;package_version\u0026#34; }, { \u0026#34;value\u0026#34;: \u0026#34;musl\u0026#34;, \u0026#34;key\u0026#34;: \u0026#34;package_name\u0026#34; }, { \u0026#34;value\u0026#34;: \u0026#34;AV:L/AC:L/Au:N/C:N/I:N/A:P\u0026#34;, \u0026#34;key\u0026#34;: \u0026#34;CVSS2_VECTOR\u0026#34; }, { \u0026#34;value\u0026#34;: \u0026#34;2.1\u0026#34;, \u0026#34;key\u0026#34;: \u0026#34;CVSS2_SCORE\u0026#34; } ], \u0026#34;name\u0026#34;: \u0026#34;CVE-2020-28928\u0026#34;, \u0026#34;uri\u0026#34;: \u0026#34;https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-28928\u0026#34; } ], \u0026#34;findingSeverityCounts\u0026#34;: { \u0026#34;MEDIUM\u0026#34;: 3, \u0026#34;LOW\u0026#34;: 1 } } } Let\u0026rsquo;s reduce our image size Update your Dockerfile\nFROM golang:1.13-alpine to\nFROM scratch\nyou should get an error\ntag invalid: The image tag \u0026#39;0.1.20\u0026#39; already exists in the \u0026#39;golang_example-houston\u0026#39; repository and cannot be overwritten because the repository is immutable. make: *** [docker_push] Error 1 Update the version.txt to the number you think is appropriate\nThen rebuild\nInspect the image size differences\ndocker images 123456789012.dkr.ecr.us-west-2.amazonaws.com/golang_example-houston 0.1.21 e199bbd29e43 3 minutes ago 16.1MB 123456789012.dkr.ecr.us-west-2.amazonaws.com/golang_example-houston 0.1.20 20b885db4549 12 minutes ago 376MB Now scratch container only has the go binary in it\n$ make ecr_scan_findings aws ecr describe-image-scan-findings --repository-name golang_example-houston --image-id imageTag=0.1.21 { \u0026#34;imageScanStatus\u0026#34;: { \u0026#34;status\u0026#34;: \u0026#34;FAILED\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;UnsupportedImageError: The operating system and/or package manager are not supported.\u0026#34; }, \u0026#34;repositoryName\u0026#34;: \u0026#34;golang_example-houston\u0026#34;, \u0026#34;registryId\u0026#34;: \u0026#34;123456789012\u0026#34;, \u0026#34;imageId\u0026#34;: { \u0026#34;imageTag\u0026#34;: \u0026#34;0.1.21\u0026#34;, \u0026#34;imageDigest\u0026#34;: \u0026#34;sha256:97169aa383bf476466e9af45079aed95e8bfdb09cbf94ca05a11ede20631c323\u0026#34; }, \u0026#34;imageScanFindings\u0026#34;: null } AWS CodePipeline Now that we have a CodePipeline setup thanks to terraform let\u0026rsquo;s push our code there and watch the pipeline run\nWe need to give our Codepipeline Role access to the cluster\nmake cluster_iam eksctl create iamidentitymapping --cluster devsecops --arn arn:aws:iam::123456789012:role/devsecops-houston-codebuild --username admin \\ --group system:masters 2021-09-18 20:33:43 [â„¹] eksctl version 0.67.0 2021-09-18 20:33:43 [â„¹] using region us-west-2 2021-09-18 20:33:43 [â„¹] adding identity \u0026#34;arn:aws:iam::123456789012:role/devsecops-houston-codebuild\u0026#34; to auth ConfigMap We clone the repo from github but now let\u0026rsquo;s push it to AWS CodeCommit\nIf you don\u0026rsquo;t remember the name we can use the aws cli to find it for use\naws codecommit list-repositories { \u0026#34;repositories\u0026#34;: [ { \u0026#34;repositoryName\u0026#34;: \u0026#34;houston-devsecops-repo\u0026#34;, \u0026#34;repositoryId\u0026#34;: \u0026#34;568b8724-36c5-44fe-9848-42e2db43a861\u0026#34; } } Now we can push the repo to AWS Code commit by adding a new remote\ngit remote add aws https://git-codecommit.us-west-2.amazonaws.com/v1/repos/houston-devsecops-repo git push aws Navigate to the CodePipeline console to build in progress\nOnce our deploymnet finishes we can test the cluster in AWS\nkubectl get svc clusterip-service NAME TYPE CLUSTER-IP EXTERNAL-IP PORT(S) AGE clusterip-service LoadBalancer 10.100.254.156 a9d40a7cc91b447e7a7830a6aa4a1b97-970438419.us-west-2.elb.amazonaws.com 80:30430/TCP 87m ~/environment/devsecopspipeline (main) $curl a9d40a7cc91b447e7a7830a6aa4a1b97-970438419.us-west-2.elb.amazonaws.com/ {\u0026#34;message\u0026#34;:\u0026#34;Default Page\u0026#34;} ~/environment/devsecopspipeline (main) $ curl a9d40a7cc91b447e7a7830a6aa4a1b97-970438419.us-west-2.elb.amazonaws.com/data {\u0026#34;message\u0026#34;:\u0026#34;Database Connected\u0026#34;} ~/environment/devsecopspipeline (main) $ curl a9d40a7cc91b447e7a7830a6aa4a1b97-970438419.us-west-2.elb.amazonaws.com/host {\u0026#34;message\u0026#34;:\u0026#34;NODE: ip-192-168-62-23.us-west-2.compute.internal, POD IP:192.168.51.0\u0026#34;} ~/environment/devsecopspipeline (main) $ "
},
{
	"uri": "//localhost:1313/run/",
	"title": "Running Containers",
	"tags": [],
	"description": "",
	"content": "  Minimal OS\n Federa CoreOS CoreOSâ€™s Container Linux Rancher OS Ubuntu Core OS AWS BottleRocket VMware Photon OS    Run time - tools should be deployed that monitor running containers that misbehave\n  Resource Caps to reduce DDOS possibilities\n  Continuous scan images in registry for vulnerabilities in the registries, images can run in production but not get updated and deployed\n  Create separate environments for development, test, production and other scenarios, each with specific controls to provide RBAC for container deployment and management activities.\n  Shared Kernel â€“ Do not mix containerized and non-containerized workloads on the same host instance\n  Regular rebuild clusters and benchmark security\n https://github.com/aquasecurity/kube-bench    Network Policies\n Per Namespace if using Kubernetes network policies Applications should have their own define with the deployment    Admins should have examples so application developers can understand how it impacts their applications\n  "
},
{
	"uri": "//localhost:1313/run/exercise/",
	"title": "Running Containers Exercise",
	"tags": [],
	"description": "",
	"content": "Installing Prometheus to our cluster make helm_update helm repo add stable https://charts.helm.sh/stable \u0026amp;\u0026amp; \\ helm repo update \u0026#34;stable\u0026#34; has been added to your repositories Hang tight while we grab the latest from your chart repositories... ...Successfully got an update from the \u0026#34;stable\u0026#34; chart repository Update Complete. âŽˆHappy Helming!âŽˆ ~/environment/devsecopspipeline (master) $ make prom helm repo add stable https://charts.helm.sh/stable \u0026amp;\u0026amp; \\ helm repo update \u0026#34;stable\u0026#34; already exists with the same configuration, skipping Hang tight while we grab the latest from your chart repositories... ...Successfully got an update from the \u0026#34;stable\u0026#34; chart repository Update Complete. âŽˆHappy Helming!âŽˆ kubectl apply -f namespace_prometheus.yml \u0026amp;\u0026amp; \\ helm install prometheus stable/prometheus \\ --namespace prometheus \\ --set alertmanager.persistentVolume.storageClass=\u0026#34;gp2\u0026#34;,server.persistentVolume.storageClass=\u0026#34;gp2\u0026#34; namespace/prometheus created WARNING: This chart is deprecated W0911 22:48:05.645050 16010 warnings.go:70] rbac.authorization.k8s.io/v1beta1 ClusterRole is deprecated in v1.17+, unavailable in v1.22+; use rbac.authorization.k8s.io/v1 ClusterRole W0911 22:48:05.656705 16010 warnings.go:70] rbac.authorization.k8s.io/v1beta1 ClusterRole is deprecated in v1.17+, unavailable in v1.22+; use rbac.authorization.k8s.io/v1 ClusterRole W0911 22:48:05.667391 16010 warnings.go:70] rbac.authorization.k8s.io/v1beta1 ClusterRole is deprecated in v1.17+, unavailable in v1.22+; use rbac.authorization.k8s.io/v1 ClusterRole W0911 22:48:05.679784 16010 warnings.go:70] rbac.authorization.k8s.io/v1beta1 ClusterRole is deprecated in v1.17+, unavailable in v1.22+; use rbac.authorization.k8s.io/v1 ClusterRole W0911 22:48:05.691168 16010 warnings.go:70] rbac.authorization.k8s.io/v1beta1 ClusterRoleBinding is deprecated in v1.17+, unavailable in v1.22+; use rbac.authorization.k8s.io/v1 ClusterRoleBinding W0911 22:48:05.703088 16010 warnings.go:70] rbac.authorization.k8s.io/v1beta1 ClusterRoleBinding is deprecated in v1.17+, unavailable in v1.22+; use rbac.authorization.k8s.io/v1 ClusterRoleBinding W0911 22:48:05.716013 16010 warnings.go:70] rbac.authorization.k8s.io/v1beta1 ClusterRoleBinding is deprecated in v1.17+, unavailable in v1.22+; use rbac.authorization.k8s.io/v1 ClusterRoleBinding W0911 22:48:05.733060 16010 warnings.go:70] rbac.authorization.k8s.io/v1beta1 ClusterRoleBinding is deprecated in v1.17+, unavailable in v1.22+; use rbac.authorization.k8s.io/v1 ClusterRoleBinding W0911 22:48:05.962690 16010 warnings.go:70] rbac.authorization.k8s.io/v1beta1 ClusterRole is deprecated in v1.17+, unavailable in v1.22+; use rbac.authorization.k8s.io/v1 ClusterRole W0911 22:48:05.965226 16010 warnings.go:70] rbac.authorization.k8s.io/v1beta1 ClusterRole is deprecated in v1.17+, unavailable in v1.22+; use rbac.authorization.k8s.io/v1 ClusterRole W0911 22:48:05.968345 16010 warnings.go:70] rbac.authorization.k8s.io/v1beta1 ClusterRole is deprecated in v1.17+, unavailable in v1.22+; use rbac.authorization.k8s.io/v1 ClusterRole W0911 22:48:05.968824 16010 warnings.go:70] rbac.authorization.k8s.io/v1beta1 ClusterRole is deprecated in v1.17+, unavailable in v1.22+; use rbac.authorization.k8s.io/v1 ClusterRole W0911 22:48:05.978633 16010 warnings.go:70] rbac.authorization.k8s.io/v1beta1 ClusterRoleBinding is deprecated in v1.17+, unavailable in v1.22+; use rbac.authorization.k8s.io/v1 ClusterRoleBinding W0911 22:48:05.979460 16010 warnings.go:70] rbac.authorization.k8s.io/v1beta1 ClusterRoleBinding is deprecated in v1.17+, unavailable in v1.22+; use rbac.authorization.k8s.io/v1 ClusterRoleBinding W0911 22:48:05.979460 16010 warnings.go:70] rbac.authorization.k8s.io/v1beta1 ClusterRoleBinding is deprecated in v1.17+, unavailable in v1.22+; use rbac.authorization.k8s.io/v1 ClusterRoleBinding W0911 22:48:05.980533 16010 warnings.go:70] rbac.authorization.k8s.io/v1beta1 ClusterRoleBinding is deprecated in v1.17+, unavailable in v1.22+; use rbac.authorization.k8s.io/v1 ClusterRoleBinding NAME: prometheus LAST DEPLOYED: Sat Sep 11 22:48:05 2021 NAMESPACE: prometheus STATUS: deployed REVISION: 1 TEST SUITE: None NOTES: DEPRECATED and moved to \u0026lt;https://github.com/prometheus-community/helm-charts\u0026gt;The Prometheus server can be accessed via port 80 on the following DNS name from within your cluster: prometheus-server.prometheus.svc.cluster.local Get the Prometheus server URL by running these commands in the same shell: export POD_NAME=$(kubectl get pods --namespace prometheus -l \u0026#34;app=prometheus,component=server\u0026#34; -o jsonpath=\u0026#34;{.items[0].metadata.name}\u0026#34;) kubectl --namespace prometheus port-forward $POD_NAME 9090 The Prometheus alertmanager can be accessed via port 80 on the following DNS name from within your cluster: prometheus-alertmanager.prometheus.svc.cluster.local Get the Alertmanager URL by running these commands in the same shell: export POD_NAME=$(kubectl get pods --namespace prometheus -l \u0026#34;app=prometheus,component=alertmanager\u0026#34; -o jsonpath=\u0026#34;{.items[0].metadata.name}\u0026#34;) kubectl --namespace prometheus port-forward $POD_NAME 9093 ################################################################################# ###### WARNING: Pod Security Policy has been moved to a global property. ##### ###### use .Values.podSecurityPolicy.enabled with pod-based ##### ###### annotations ##### ###### (e.g. .Values.nodeExporter.podSecurityPolicy.annotations) ##### ################################################################################# The Prometheus PushGateway can be accessed via port 9091 on the following DNS name from within your cluster: prometheus-pushgateway.prometheus.svc.cluster.local Get the PushGateway URL by running these commands in the same shell: export POD_NAME=$(kubectl get pods --namespace prometheus -l \u0026#34;app=prometheus,component=pushgateway\u0026#34; -o jsonpath=\u0026#34;{.items[0].metadata.name}\u0026#34;) kubectl --namespace prometheus port-forward $POD_NAME 9091 For more information on running Prometheus, visit: https://prometheus.io/ Deploying Fluentbit for our logs \u0026ldquo;FireLens gives you a simplified interface to filter logs at source, add useful metadata and send logs to almost any destination. You can now stream logs directly to Amazon CloudWatch, Amazon Kinesis Data Firehose destinations such as Amazon Elasticsearch, Amazon S3, Amazon Kinesis Data Streams and partner tools. Using Amazon ECS task definition parameters, you can select destinations and optionally define filters for additional control and FireLens will ingest logs to target destinations.\u0026rdquo;\n$ make deploy-fluent-bit aws iam create-policy --policy-name EKS-CloudWatchLogs-\u0026#34;devsecops\u0026#34; --policy-document file://./fluent-bit/aws/iam_role_policy.json { \u0026#34;Policy\u0026#34;: { \u0026#34;PolicyName\u0026#34;: \u0026#34;EKS-CloudWatchLogs-devsecops\u0026#34;, \u0026#34;PermissionsBoundaryUsageCount\u0026#34;: 0, \u0026#34;CreateDate\u0026#34;: \u0026#34;2021-09-11T22:48:53Z\u0026#34;, \u0026#34;AttachmentCount\u0026#34;: 0, \u0026#34;IsAttachable\u0026#34;: true, \u0026#34;PolicyId\u0026#34;: \u0026#34;ANPAUKKITVMH4UNGDATVQ\u0026#34;, \u0026#34;DefaultVersionId\u0026#34;: \u0026#34;v1\u0026#34;, \u0026#34;Path\u0026#34;: \u0026#34;/\u0026#34;, \u0026#34;Arn\u0026#34;: \u0026#34;arn:aws:iam::297041898255:policy/EKS-CloudWatchLogs-devsecops\u0026#34;, \u0026#34;UpdateDate\u0026#34;: \u0026#34;2021-09-11T22:48:53Z\u0026#34; } } aws iam attach-role-policy --role-name ng-1 --policy-arn `aws iam list-policies | jq -r \u0026#39;.[][] | select(.PolicyName == \u0026#34;EKS-CloudWatchLogs-devsecops\u0026#34;) | .Arn\u0026#39;` We now have deployed the Fluentbit plugin, we should see logs in our CloudWatch log Groups for our application.\nDeploy Falco ~/environment/devsecopspipeline (main) $ make deploy-falco helm repo add falcosecurity https://falcosecurity.github.io/charts; \\ helm repo update; \\ helm install falco --set falco.jsonOutput=true --set image.tag=0.24.0 falcosecurity/falco \u0026#34;falcosecurity\u0026#34; has been added to your repositories Hang tight while we grab the latest from your chart repositories... ...Successfully got an update from the \u0026#34;falcosecurity\u0026#34; chart repository ...Successfully got an update from the \u0026#34;stable\u0026#34; chart repository Update Complete. âŽˆHappy Helming!âŽˆ NAME: falco LAST DEPLOYED: Tue Sep 21 19:02:22 2021 NAMESPACE: default STATUS: deployed REVISION: 1 TEST SUITE: None NOTES: Falco agents are spinning up on each node in your cluster. After a few seconds, they are going to start monitoring your containers looking for security issues. No further action should be required. Tip: You can easily forward Falco events to Slack, Kafka, AWS Lambda and more with falcosidekick. Full list of outputs: https://github.com/falcosecurity/charts/falcosidekick. You can enable its deployment with `--set falcosidekick.enabled=true` or in your values.yaml. See: https://github.com/falcosecurity/charts/blob/master/falcosidekick/values.yaml for configuration values. You can see in Cloud Watch Falco Logs\nhttps://us-west-2.console.aws.amazon.com/cloudwatch/home?region=us-west-2#logsV2:log-groups/log-group/falco/log-events/alerts\n"
},
{
	"uri": "//localhost:1313/conclusion/",
	"title": "Conclusion",
	"tags": [],
	"description": "",
	"content": "CI/CD\n Maintain a code repository - AWS CodeCommit Automate the build - AWS CodePipeline Keep the build fast Make the build self-testing - AWS CodeBuild Commit early, commit often Every commit to the mainline gets built Everyone can see the results of the build Automate the deployment - AWS CodeBuild  Security\n Immutable artifacts - AWS ECR Static Code Analysis - GoSec or other related tools CVE Scanning - AWS ECR Least Privileged - Docker and Pod Security settings Network Isolation - Network Policies Run Time protection - Falco Signed Commits - Git and PGP Signed Images - Docker Notary and SigStore cosign  Additional AWS Resources\nPracticing CI/CD on AWS Whitepaper\nAWS Macie - ML Security\nAWS Security Hub\n"
},
{
	"uri": "//localhost:1313/conclusion/clean/",
	"title": "Cleanup",
	"tags": [],
	"description": "",
	"content": "AWS Code resources Delete the Codebuild, Code commit and pipeline\nmake tf_delete Cluster Delete the EKS Cluster\nmake clean_cluster Make sure to delete any other resources created\nLoad Balancers Verify there are no Load balancers running, ALB or otherwise\naws elbv2 describe-load-balancers --query \u0026#34;LoadBalancers[].LoadBalancerArn\u0026#34; aws elb describe-load-balancers --query \u0026#34;LoadBalancerDescriptions[].DNSName\u0026#34; PVC and EBS volumes Verify there are no left over EBS volumes from the PVC\u0026rsquo;s for test application\naws ec2 describe-volumes --filters Name=tag:kubernetes.io/created-for/pv/name,Values=* --query \u0026#34;Volumes[].{ID:VolumeId}\u0026#34; "
},
{
	"uri": "//localhost:1313/conclusion/workshops/",
	"title": "Additional workshops",
	"tags": [],
	"description": "",
	"content": "https://containersonaws.com/\nhttps://www.eksworkshop.com/010_introduction/\nhttps://containersfromthecouch.com/\n"
},
{
	"uri": "//localhost:1313/survey/",
	"title": "Survey",
	"tags": [],
	"description": "",
	"content": "For a chance to win a copy of \u0026ldquo;Networking and Kubernetes: A Layered Approach\u0026rdquo; and to help improve this workshop please fill out this survey here\n"
},
{
	"uri": "//localhost:1313/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "//localhost:1313/authors/",
	"title": "Credits",
	"tags": [],
	"description": "",
	"content": "\u0026lt;div\u0026gt; \u0026lt;img src=\u0026quot;https://avatars.githubusercontent.com/u/2372917?v=4\u0026quot; class=\u0026quot;inline\u0026quot; width=\u0026quot;32\u0026quot; height=\u0026quot;32\u0026quot; style=\u0026quot;height: 32px;height: 32px;margin-bottom:.25em; vertical-align:middle; \u0026quot;\u0026gt; \u0026lt;label\u0026gt;\u0026lt;a href=\u0026quot;https://github.com/strongjz\u0026quot;\u0026gt;@strongjz\u0026lt;/a\u0026gt;\u0026lt;/label\u0026gt; \u0026lt;span class=\u0026quot;contributions\u0026quot;\u0026gt;55 commits\u0026lt;/span\u0026gt; \u0026lt;/div\u0026gt;  "
},
{
	"uri": "//localhost:1313/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]

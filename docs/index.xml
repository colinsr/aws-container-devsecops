<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>AWS DevSecOps Container Pipeline on AWS Container DevSecOps</title>
    <link>//localhost:1313/</link>
    <description>Recent content in AWS DevSecOps Container Pipeline on AWS Container DevSecOps</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 17 Aug 2021 15:08:20 -0400</lastBuildDate><atom:link href="//localhost:1313/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Contino</title>
      <link>//localhost:1313/intro/contino/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>//localhost:1313/intro/contino/</guid>
      <description></description>
    </item>
    
    <item>
      <title>AWS Cloud9</title>
      <link>//localhost:1313/setup/cloud9/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>//localhost:1313/setup/cloud9/</guid>
      <description>A list of supported browsers for AWS Cloud9 is found here.
   Launch Cloud9 in your closest region
Create a Cloud9 Environment: https://us-west-2.console.aws.amazon.com/cloud9/home?region=us-west-2
You&amp;rsquo;ll be prompt to log into your AWS Account in order to provision a Cloud9 Workspace
  Configure the Cloud9 instance  Review the setup before submitting for creation  Wait for the Cloud9 instance to boot  Increase disk size for your Cloud9 Instance  Increase the disk size of your instances, this will cause your instance to reboot</description>
    </item>
    
    <item>
      <title>Cloud 9 Settings Configuration</title>
      <link>//localhost:1313/setup/iam/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>//localhost:1313/setup/iam/</guid>
      <description>Create IAM Role   Log into your AWS Account you are using for this workshop.
  Follow this link to create an IAM role with Administrator access.
  Confirm that AWS service and EC2 are selected, then click Next: Permissions to view permissions.   Confirm that AdministratorAccess is checked, then click Next: Tags to assign tags.   Take the defaults, and click Next: Review to review.</description>
    </item>
    
    <item>
      <title>Workshop tools</title>
      <link>//localhost:1313/setup/tools/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>//localhost:1313/setup/tools/</guid>
      <description>In order for us to continue with the exercises, there are several tools that our needed to be installed on our Cloud9 instance.
Download these two repos with git
git clone https://github.com/strongjz/devsecopspipeline
git clone https://github.com/strongjz/aws-container-devsecops
Or Download the script here.
  Scripts   tools-install.sh  (1 kb)    The script will install
 docker kind terraform eksctl kubectl helm  Navigate to where you downloaded the installation script.</description>
    </item>
    
    <item>
      <title>Code Signing</title>
      <link>//localhost:1313/development/signing/</link>
      <pubDate>Tue, 17 Aug 2021 15:07:49 -0400</pubDate>
      
      <guid>//localhost:1313/development/signing/</guid>
      <description>Needed:
 GPG Key Keybase - optional Github Account  Generating a GPG Key  Generate a with gpg gpg --full-generate-key Select what key you want to use, ECC (sign and encrypt) default Select what elliptic curve you want, Curve 25519 default Fill out your name and your email address. Make sure this matches the one in your GitHub account. Add a comment if you want to remind you what the key is for.</description>
    </item>
    
    <item>
      <title>Linting</title>
      <link>//localhost:1313/development/linting/</link>
      <pubDate>Tue, 17 Aug 2021 15:07:57 -0400</pubDate>
      
      <guid>//localhost:1313/development/linting/</guid>
      <description>Linting is the process of analyzing code for syntax issues; it can aid in finding bugs and performance issues, offers simplifications, and enforces style rules.
Other notable uses for Linting:
 formatting discrepancy, go fmt. non-adherence to coding standards and conventions, shellchecker for example diagnosing possible logical errors in your applications. go vet Interpreted languages like Python, Ruby, and JavaScript benefit from linting, as these languages don’t have a compiling phase to display errors before execution.</description>
    </item>
    
    <item>
      <title>Open Web Application Security Project</title>
      <link>//localhost:1313/development/owasp/</link>
      <pubDate>Tue, 17 Aug 2021 15:07:57 -0400</pubDate>
      
      <guid>//localhost:1313/development/owasp/</guid>
      <description>The OWASP Top 10 is a standard awareness document for developers and web application security. It represents a broad consensus about the most critical security risks to web applications.
OWASP Top 10   A1:2017-Injection   Injection flaws, such as SQL, NoSQL, OS, and LDAP injection, occur when untrusted data is sent to an interpreter as part of a command or query. The attacker’s hostile data can trick the interpreter into executing unintended commands or accessing data without proper authorization.</description>
    </item>
    
    <item>
      <title>Pre Commit</title>
      <link>//localhost:1313/development/pre-commit/</link>
      <pubDate>Tue, 17 Aug 2021 15:08:20 -0400</pubDate>
      
      <guid>//localhost:1313/development/pre-commit/</guid>
      <description>Introduction The pre-commit hook is run first, before you even type in a commit message. It’s used to inspect the snapshot that’s about to be committed,
It can be used to detect
 missing semicolons trailing whitespace debug statements aws credentials private keys  Pre-commit is a framework for managing and maintaining multi-language pre-commit hooks.
https://github.com/pre-commit/pre-commit
 detect-aws-credentials - Checks for the existence of AWS secrets that you have set up with the AWS CLI.</description>
    </item>
    
    <item>
      <title>3 Musketeers</title>
      <link>//localhost:1313/development/3-musketeers/</link>
      <pubDate>Tue, 17 Aug 2021 15:08:14 -0400</pubDate>
      
      <guid>//localhost:1313/development/3-musketeers/</guid>
      <description>Tools used in the 3 Musketeers pattern:
 Make Docker Docker Compose  From https://3musketeers.io/
Consistency - Run the same commands no matter where you are: Linux, macOS, Windows, CI/CD tools that supports Docker like GitHub Actions, Travis CI, CircleCI, and GitLab CI.
Control - Take control of languages, versions, and tools you need, and version source control your pipelines with your preferred VCS like GitHub and GitLab.
Confidence - Test your code and pipelines locally before your CI/CD tool runs it.</description>
    </item>
    
    <item>
      <title>Secure Containers</title>
      <link>//localhost:1313/build/container/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>//localhost:1313/build/container/</guid>
      <description>Baseline  DISABLE ROOT  Mount the container&amp;rsquo;s root filesystem as read-only set k8s Security context set Linux Capabilities Disable privilege escalation    securityContext: allowPrivilegeEscalation: false  Least Privilege by defining user  apiVersion: v1 kind: Pod metadata: name: pod-security spec: securityContext: runAsUser: 10000 runAsGroup: 30000 fsGroup: 20000  Run time Protections  SELinux, AppArmor, Auditd, Falco   Network policies Container Capabilities  capabilities: add: [&amp;#34;NET_ADMIN&amp;#34;, &amp;#34;SYS_TIME&amp;#34;]  DISABLE ROOT  Helpers Versioning</description>
    </item>
    
    <item>
      <title>Secure Containers Exercise</title>
      <link>//localhost:1313/build/exercise/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>//localhost:1313/build/exercise/</guid>
      <description>Navigate to DevSecops repo
cd ~/environment/devsecopspipeline ~/environment/devsecopspipeline (master) $ export DB_PASSWORD=temppassword AWSReservedSSO_AdministratorAccess_9c06ffa3ce9d7954:~/environment/devsecopspipeline (master) $ make compose_up docker-compose up Recreating devsecopspipeline_db_1 ... done Recreating devsecopspipeline_go-example_1 ... done Attaching to devsecopspipeline_db_1, devsecopspipeline_go-example_1 db_1 | The files belonging to this database system will be owned by user &amp;#34;postgres&amp;#34;. db_1 | This user must also own the server process. db_1 | db_1 | The database cluster will be initialized with locale &amp;#34;en_US.utf8&amp;#34;. db_1 | The default database encoding has accordingly been set to &amp;#34;UTF8&amp;#34;.</description>
    </item>
    
    <item>
      <title>Container Pipeline Exercise</title>
      <link>//localhost:1313/pipeline/exercise/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>//localhost:1313/pipeline/exercise/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Running Containers Exercise</title>
      <link>//localhost:1313/run/run.files/exercise/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>//localhost:1313/run/run.files/exercise/</guid>
      <description></description>
    </item>
    
    <item>
      <title></title>
      <link>//localhost:1313/run/run.files/falco-demo/nodejs-bad-rest-api/readme/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>//localhost:1313/run/run.files/falco-demo/nodejs-bad-rest-api/readme/</guid>
      <description>Demo of falco with bash exec via poorly designed REST API. Introduction This example shows how a server could have a poorly designed API that allowed a client to execute arbitrary programs on the server, and how that behavior can be detected using Sysdig Falco.
server.js in this directory defines the server. The poorly designed API is this route handler:
router.get(&amp;#39;/exec/:cmd&amp;#39;, function(req, res) { var output = child_process.execSync(req.params.cmd); res.send(output); }); app.</description>
    </item>
    
  </channel>
</rss>
